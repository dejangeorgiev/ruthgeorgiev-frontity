webpackHotUpdate("post",{

/***/ "./packages/twentytwenty-theme/src/components/post/post.js":
/*!*****************************************************************!*\
  !*** ./packages/twentytwenty-theme/src/components/post/post.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tailwind.macro/utils.umd.js */ \"./node_modules/tailwind.macro/utils.umd.js\");\n/* harmony import */ var tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _tailwind_config_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../../../../tailwind.config.js */ \"./tailwind.config.js\");\n/* harmony import */ var _tailwind_config_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_tailwind_config_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _featured_media__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./featured-media */ \"./packages/twentytwenty-theme/src/components/post/featured-media.js\");\n/* harmony import */ var _post_item__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./post-item */ \"./packages/twentytwenty-theme/src/components/post/post-item.js\");\n/* harmony import */ var _post_categories__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./post-categories */ \"./packages/twentytwenty-theme/src/components/post/post-categories.js\");\n/* harmony import */ var _post_meta__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./post-meta */ \"./packages/twentytwenty-theme/src/components/post/post-meta.js\");\n/* harmony import */ var _post_tags__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./post-tags */ \"./packages/twentytwenty-theme/src/components/post/post-tags.js\");\n/* harmony import */ var _acf_ingredients_Ingredients__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./acf/ingredients/Ingredients */ \"./packages/twentytwenty-theme/src/components/post/acf/ingredients/Ingredients.js\");\n/* harmony import */ var _acf_sponsored_Sponsored__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./acf/sponsored/Sponsored */ \"./packages/twentytwenty-theme/src/components/post/acf/sponsored/Sponsored.js\");\n/* harmony import */ var _acf_badges_Badge__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./acf/badges/Badge */ \"./packages/twentytwenty-theme/src/components/post/acf/badges/Badge.js\");\n/* harmony import */ var _acf_equipment_Equipment__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./acf/equipment/Equipment */ \"./packages/twentytwenty-theme/src/components/post/acf/equipment/Equipment.js\");\n/* harmony import */ var _acf_RecipeDescription__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./acf/RecipeDescription */ \"./packages/twentytwenty-theme/src/components/post/acf/RecipeDescription.js\");\n/* harmony import */ var _acf_RecipeNote__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./acf/RecipeNote */ \"./packages/twentytwenty-theme/src/components/post/acf/RecipeNote.js\");\n/* harmony import */ var _acf_tips_RecipeTips__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./acf/tips/RecipeTips */ \"./packages/twentytwenty-theme/src/components/post/acf/tips/RecipeTips.js\");\n/* harmony import */ var _acf_cuisine_Cuisine__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./acf/cuisine/Cuisine */ \"./packages/twentytwenty-theme/src/components/post/acf/cuisine/Cuisine.js\");\n/* harmony import */ var _acf_diets_Diets__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./acf/diets/Diets */ \"./packages/twentytwenty-theme/src/components/post/acf/diets/Diets.js\");\n/* harmony import */ var _acf_dishes_Dishes__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./acf/dishes/Dishes */ \"./packages/twentytwenty-theme/src/components/post/acf/dishes/Dishes.js\");\n/* harmony import */ var _acf_meals_Meals__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./acf/meals/Meals */ \"./packages/twentytwenty-theme/src/components/post/acf/meals/Meals.js\");\n/* harmony import */ var _acf_YoutubeVideo__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./acf/YoutubeVideo */ \"./packages/twentytwenty-theme/src/components/post/acf/YoutubeVideo.js\");\n/* harmony import */ var _global_icons_YouTubeIcon__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../global/icons/YouTubeIcon */ \"./packages/twentytwenty-theme/src/components/global/icons/YouTubeIcon.js\");\n/* harmony import */ var _global_icons_png_EasyRecipe_png__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../global/icons/png/EasyRecipe.png */ \"./packages/twentytwenty-theme/src/components/global/icons/png/EasyRecipe.png\");\n/* harmony import */ var _global_icons_png_EasyRecipe_png__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(_global_icons_png_EasyRecipe_png__WEBPACK_IMPORTED_MODULE_23__);\n/* harmony import */ var _global_icons_png_ModernCookingTools_png__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../global/icons/png/ModernCookingTools.png */ \"./packages/twentytwenty-theme/src/components/global/icons/png/ModernCookingTools.png\");\n/* harmony import */ var _global_icons_png_ModernCookingTools_png__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(_global_icons_png_ModernCookingTools_png__WEBPACK_IMPORTED_MODULE_24__);\n/* harmony import */ var _global_icons_png_ProfessionalChefFemale_png__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../global/icons/png/ProfessionalChefFemale.png */ \"./packages/twentytwenty-theme/src/components/global/icons/png/ProfessionalChefFemale.png\");\n/* harmony import */ var _global_icons_png_ProfessionalChefFemale_png__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(_global_icons_png_ProfessionalChefFemale_png__WEBPACK_IMPORTED_MODULE_25__);\n/* harmony import */ var _global_icons_png_RecipeTips_png__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../global/icons/png/RecipeTips.png */ \"./packages/twentytwenty-theme/src/components/global/icons/png/RecipeTips.png\");\n/* harmony import */ var _global_icons_png_RecipeTips_png__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(_global_icons_png_RecipeTips_png__WEBPACK_IMPORTED_MODULE_26__);\n/* harmony import */ var _acf_RecipePreparationTime__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./acf/RecipePreparationTime */ \"./packages/twentytwenty-theme/src/components/post/acf/RecipePreparationTime.js\");\n/* harmony import */ var _acf_RecipeCookingTime__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./acf/RecipeCookingTime */ \"./packages/twentytwenty-theme/src/components/post/acf/RecipeCookingTime.js\");\n/* harmony import */ var _acf_RecipeServings__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./acf/RecipeServings */ \"./packages/twentytwenty-theme/src/components/post/acf/RecipeServings.js\");\n/* harmony import */ var _acf_recommended_posts_RecommendedPosts__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./acf/recommended/posts/RecommendedPosts */ \"./packages/twentytwenty-theme/src/components/post/acf/recommended/posts/RecommendedPosts.js\");\n/* harmony import */ var react_reading_progress__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! react-reading-progress */ \"./node_modules/react-reading-progress/lib/index.js\");\n/* harmony import */ var react_reading_progress__WEBPACK_IMPORTED_MODULE_31___default = /*#__PURE__*/__webpack_require__.n(react_reading_progress__WEBPACK_IMPORTED_MODULE_31__);\n/* harmony import */ var _global_comments_index__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../global/comments/index */ \"./packages/twentytwenty-theme/src/components/global/comments/index.js\");\n/* harmony import */ var _global_social_share_SocialMediaShareButtons__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../global/social-share/SocialMediaShareButtons */ \"./packages/twentytwenty-theme/src/components/global/social-share/SocialMediaShareButtons.js\");\n/* harmony import */ var _global_marketing_google_GoogleStructuredDataForRecipe__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../global/marketing/google/GoogleStructuredDataForRecipe */ \"./packages/twentytwenty-theme/src/components/global/marketing/google/GoogleStructuredDataForRecipe.js\");\n/* harmony import */ var _acf_sponsored_SponsoredBadge__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./acf/sponsored/SponsoredBadge */ \"./packages/twentytwenty-theme/src/components/post/acf/sponsored/SponsoredBadge.js\");\n/* harmony import */ var _global_marketing_stories_ReactInstaStories__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../global/marketing/stories/ReactInstaStories */ \"./packages/twentytwenty-theme/src/components/global/marketing/stories/ReactInstaStories.js\");\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var _tailwindConfig=tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.resolveConfig(_tailwind_config_js__WEBPACK_IMPORTED_MODULE_2___default.a);var Post=(_ref)=>{var{state,actions,libraries}=_ref;// Get information about the current URL.\nvar data=state.source.get(state.router.link);// Get the data of the post.\nvar post=state.source[data.type][data.id];var postUrl=state.frontity.url+state.router.link;var media=state.source.attachment[post.featured_media];// Get the data of the author.\n// const author = state.source.author[post.author];\n// Get a human readable date.\n// const date = new Date(post.date);\n// Get the html2react component.\nvar Html2React=libraries.html2react.Component;// Get all categories\nvar allCategories=state.source.category;/**\n     * The item's categories is an array of each category id\n     * So, we'll look up the details of each category in allCategories\n     */var categories=post.categories&&post.categories.map(catId=>allCategories[catId]);// Get all tags\nvar allTags=state.source.tag;/**\n     * The item's categories is an array of each tag id\n     * So, we'll look up the details of each tag in allTags\n     */var tags=post.tags&&post.tags.map(tagId=>allTags[tagId]);// Get all cuisine\nvar allCuisine=state.source.cuisine;/**\n     * The item's cuisine is an array of each cuisine id\n     * So, we'll look up the details of each cuisine in allCuisine\n     */var cuisine=post.cuisine&&post.cuisine.map(cuisineId=>allCuisine[cuisineId]);// Get all diets\nvar allDiets=state.source.diets;/**\n     * The item's diets is an array of each diet id\n     * So, we'll look up the details of each diet in allDiets\n     */var diets=post.diets&&post.diets.map(dietId=>allDiets[dietId]);// Get all dishes\nvar allDishes=state.source.dishes;/**\n     * The item's dishes is an array of each dish id\n     * So, we'll look up the details of each dish in allDishes\n     */var dishes=post.dishes&&post.dishes.map(dishId=>allDishes[dishId]);// Get all meals\nvar allMeals=state.source.meals;/**\n     * The item's dishes is an array of each category id\n     * So, we'll look up the details of each dish in allDishes\n     */var meals=post.meals&&post.meals.map(mealId=>allMeals[mealId]);/**\n     * Once the post has loaded in the DOM, prefetch both the\n     * home posts and the list component so if the user visits\n     * the home page, everything is ready and it loads instantly.\n     */Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useEffect\"])(()=>{actions.source.fetch(\"/\");},[]);// Load the post, but only if the data is ready.\nreturn data.isReady?Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(PostArticle,{id:\"target-el\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(ReadingProgressBar,{targetEl:\"#target-el\"}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_global_marketing_google_GoogleStructuredDataForRecipe__WEBPACK_IMPORTED_MODULE_34__[\"default\"],{id:post.id}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(Header,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_post_item__WEBPACK_IMPORTED_MODULE_6__[\"SectionContainer\"],null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(PostTitle,{className:\"heading-size-1\"},post.title.rendered),post.categories&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_post_categories__WEBPACK_IMPORTED_MODULE_7__[\"default\"],{categories:categories}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_post_meta__WEBPACK_IMPORTED_MODULE_8__[\"default\"],{item:post}),state.theme.featuredMedia.showOnPost&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(FeaturedImage,{id:post.featured_media,isSinglePost:true}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_global_social_share_SocialMediaShareButtons__WEBPACK_IMPORTED_MODULE_33__[\"default\"],{url:postUrl,media:media.source_url,alt:media.alt_text,title:post.title.rendered,children:post.title.rendered,hashtag:\"#ruthgeorgiev\",hashtags:['ruthgeorgiev','recipes']}),post.tags&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_post_tags__WEBPACK_IMPORTED_MODULE_9__[\"default\"],{tags:tags}),post.acf['postfieldgroup.servings']&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_acf_RecipeServings__WEBPACK_IMPORTED_MODULE_29__[\"default\"],{id:post.id}),post.acf['postfieldgroup.preparation_time']&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_acf_RecipePreparationTime__WEBPACK_IMPORTED_MODULE_27__[\"default\"],{id:post.id}),post.acf['postfieldgroup.cooking_time']&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_acf_RecipeCookingTime__WEBPACK_IMPORTED_MODULE_28__[\"default\"],{id:post.id}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(PostTaxonomies,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(CuisineTaxonomy,null,post.cuisine&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_acf_cuisine_Cuisine__WEBPACK_IMPORTED_MODULE_17__[\"default\"],{cuisine:cuisine})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(DietsTaxonomy,null,post.diets&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_acf_diets_Diets__WEBPACK_IMPORTED_MODULE_18__[\"default\"],{diets:diets})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(DishesTaxonomy,null,post.dishes&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_acf_dishes_Dishes__WEBPACK_IMPORTED_MODULE_19__[\"default\"],{dishes:dishes})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(MealsTaxonomy,null,post.meals&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_acf_meals_Meals__WEBPACK_IMPORTED_MODULE_20__[\"default\"],{meals:meals}))),post.acf['postfieldgroup.description']&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(RecipeDescriptionTitle,null,\"How to do it? \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(DescriptionIcon,{src:_global_icons_png_ProfessionalChefFemale_png__WEBPACK_IMPORTED_MODULE_25___default.a,alt:\"Professional Chef Female\"})),post.acf['postfieldgroup.description']&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_acf_RecipeDescription__WEBPACK_IMPORTED_MODULE_14__[\"default\"],{id:post.id}),post.acf['postfieldgroup.badge']&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(SectionTitle,null,\"Products i use or have tried\"),post.acf['postfieldgroup.badge']&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_acf_badges_Badge__WEBPACK_IMPORTED_MODULE_12__[\"default\"],{id:post.id}),post.acf['postfieldgroup.ingredients']&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(IngredientsTitle,null,\"Ingredients \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(IngredientsIcon,{src:_global_icons_png_EasyRecipe_png__WEBPACK_IMPORTED_MODULE_23___default.a,alt:\"Recipe Ingredients\"})),post.acf['postfieldgroup.ingredients']&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_acf_ingredients_Ingredients__WEBPACK_IMPORTED_MODULE_10__[\"default\"],{id:post.id}),post.acf['postfieldgroup.equipment']&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(EquipmentTitle,null,\"Equipment \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(EquipmentIcon,{src:_global_icons_png_ModernCookingTools_png__WEBPACK_IMPORTED_MODULE_24___default.a,alt:\"Recipe Equipment\"})),post.acf['postfieldgroup.equipment']&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_acf_equipment_Equipment__WEBPACK_IMPORTED_MODULE_13__[\"default\"],{id:post.id}),post.acf['postfieldgroup.sponsored']&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_acf_sponsored_Sponsored__WEBPACK_IMPORTED_MODULE_11__[\"default\"],{id:post.id}),post.acf['postfieldgroup.tips']&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(RecipeTipsTitle,null,\"Tips \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(RecipeTipsIcon,{src:_global_icons_png_RecipeTips_png__WEBPACK_IMPORTED_MODULE_26___default.a,alt:\"Recipe tips\"})),post.acf['postfieldgroup.tips']&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_acf_tips_RecipeTips__WEBPACK_IMPORTED_MODULE_16__[\"default\"],{id:post.id}),post.acf['postfieldgroup.note']&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_acf_RecipeNote__WEBPACK_IMPORTED_MODULE_15__[\"default\"],{id:post.id}),post.acf['postfieldgroup.video']&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(RecipeYoutubeVideoTitle,null,\"Watch how i make it \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_global_icons_YouTubeIcon__WEBPACK_IMPORTED_MODULE_22__[\"default\"],null)),post.acf['postfieldgroup.video']&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_acf_YoutubeVideo__WEBPACK_IMPORTED_MODULE_21__[\"default\"],{videoId:post.acf['postfieldgroup.video']}),post.content&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_post_item__WEBPACK_IMPORTED_MODULE_6__[\"PostInner\"],{size:\"medium\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_post_item__WEBPACK_IMPORTED_MODULE_6__[\"EntryContent\"],null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(Html2React,{html:post.content.rendered}))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_global_social_share_SocialMediaShareButtons__WEBPACK_IMPORTED_MODULE_33__[\"default\"],{url:postUrl,media:media.source_url,alt:media.alt_text,title:post.title.rendered,children:post.title.rendered,hashtag:\"#ruthgeorgiev\",hashtags:['ruthgeorgiev','recipes']}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_global_comments_index__WEBPACK_IMPORTED_MODULE_32__[\"default\"],{postId:post.id,id:\"comments\"}))),post.acf['postfieldgroup.sponsored_badge']&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_37__[\"jsx\"])(_acf_sponsored_SponsoredBadge__WEBPACK_IMPORTED_MODULE_35__[\"default\"],{id:post.id})):null;};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"connect\"])(Post));var Header=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_post_item__WEBPACK_IMPORTED_MODULE_6__[\"PostHeader\"],{target:\"e62fgu20\",label:\"Header\"})( false?undefined:{name:\"1fn4npt\",styles:\"background-color:#fff;margin:0;padding:4rem 0;@media (min-width:700px){padding:8rem 0;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var PostArticle=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_post_item__WEBPACK_IMPORTED_MODULE_6__[\"Post\"],{target:\"e62fgu21\",label:\"PostArticle\"})( false?undefined:{name:\"1kjlpqx\",styles:\"padding-top:0 !important;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kZWphbmdlb3JnaWV2L0NvZGUvcnV0aGdlb3JnaWV2LWZyb250aXR5L3BhY2thZ2VzL3R3ZW50eXR3ZW50eS10aGVtZS9zcmMvY29tcG9uZW50cy9wb3N0L3Bvc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb1JpQyIsImZpbGUiOiIvVXNlcnMvZGVqYW5nZW9yZ2lldi9Db2RlL3J1dGhnZW9yZ2lldi1mcm9udGl0eS9wYWNrYWdlcy90d2VudHl0d2VudHktdGhlbWUvc3JjL2NvbXBvbmVudHMvcG9zdC9wb3N0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzdHlsZWQsIGNvbm5lY3QsIFNsb3R9IGZyb20gXCJmcm9udGl0eVwiO1xuaW1wb3J0IFJlYWN0LCB7dXNlRWZmZWN0fSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBGZWF0dXJlZE1lZGlhIGZyb20gXCIuL2ZlYXR1cmVkLW1lZGlhXCI7XG5pbXBvcnQge1xuICAgIEVudHJ5Q29udGVudCxcbiAgICBQb3N0IGFzIF9Qb3N0LFxuICAgIFBvc3RIZWFkZXIsXG4gICAgUG9zdElubmVyLFxuICAgIFNlY3Rpb25Db250YWluZXIsXG59IGZyb20gXCIuL3Bvc3QtaXRlbVwiO1xuaW1wb3J0IFBvc3RDYXRlZ29yaWVzIGZyb20gXCIuL3Bvc3QtY2F0ZWdvcmllc1wiO1xuaW1wb3J0IFBvc3RNZXRhIGZyb20gXCIuL3Bvc3QtbWV0YVwiO1xuaW1wb3J0IFBvc3RUYWdzIGZyb20gXCIuL3Bvc3QtdGFnc1wiO1xuaW1wb3J0IEluZ3JlZGllbnRzIGZyb20gXCIuL2FjZi9pbmdyZWRpZW50cy9JbmdyZWRpZW50c1wiO1xuaW1wb3J0IFNwb25zb3JlZCBmcm9tIFwiLi9hY2Yvc3BvbnNvcmVkL1Nwb25zb3JlZFwiO1xuaW1wb3J0IEJhZGdlIGZyb20gXCIuL2FjZi9iYWRnZXMvQmFkZ2VcIjtcbmltcG9ydCBFcXVpcG1lbnQgZnJvbSBcIi4vYWNmL2VxdWlwbWVudC9FcXVpcG1lbnRcIjtcbmltcG9ydCBSZWNpcGVEZXNjcmlwdGlvbiBmcm9tIFwiLi9hY2YvUmVjaXBlRGVzY3JpcHRpb25cIjtcbmltcG9ydCBSZWNpcGVOb3RlIGZyb20gXCIuL2FjZi9SZWNpcGVOb3RlXCI7XG5pbXBvcnQgUmVjaXBlVGlwcyBmcm9tIFwiLi9hY2YvdGlwcy9SZWNpcGVUaXBzXCI7XG5pbXBvcnQgQ3Vpc2luZSBmcm9tIFwiLi9hY2YvY3Vpc2luZS9DdWlzaW5lXCI7XG5pbXBvcnQgRGlldHMgZnJvbSBcIi4vYWNmL2RpZXRzL0RpZXRzXCI7XG5pbXBvcnQgRGlzaGVzIGZyb20gXCIuL2FjZi9kaXNoZXMvRGlzaGVzXCI7XG5pbXBvcnQgTWVhbHMgZnJvbSBcIi4vYWNmL21lYWxzL01lYWxzXCI7XG5pbXBvcnQgWW91dHViZVZpZGVvIGZyb20gXCIuL2FjZi9Zb3V0dWJlVmlkZW9cIjtcbmltcG9ydCBZb3VUdWJlSWNvbiBmcm9tIFwiLi4vZ2xvYmFsL2ljb25zL1lvdVR1YmVJY29uXCI7XG5pbXBvcnQgRWFzeVJlY2lwZSBmcm9tIFwiLi4vZ2xvYmFsL2ljb25zL3BuZy9FYXN5UmVjaXBlLnBuZ1wiXG5pbXBvcnQgTW9kZXJuQ29va2luZ1Rvb2xzIGZyb20gXCIuLi9nbG9iYWwvaWNvbnMvcG5nL01vZGVybkNvb2tpbmdUb29scy5wbmdcIlxuaW1wb3J0IFByb2Zlc3Npb25hbENoZWZGZW1hbGUgZnJvbSBcIi4uL2dsb2JhbC9pY29ucy9wbmcvUHJvZmVzc2lvbmFsQ2hlZkZlbWFsZS5wbmdcIlxuaW1wb3J0IFJlY2lwZVRpcHNJY29uUG5nIGZyb20gXCIuLi9nbG9iYWwvaWNvbnMvcG5nL1JlY2lwZVRpcHMucG5nXCJcbmltcG9ydCBSZWNpcGVQcmVwYXJhdGlvblRpbWUgZnJvbSBcIi4vYWNmL1JlY2lwZVByZXBhcmF0aW9uVGltZVwiXG5pbXBvcnQgUmVjaXBlQ29va2luZ1RpbWUgZnJvbSBcIi4vYWNmL1JlY2lwZUNvb2tpbmdUaW1lXCI7XG5pbXBvcnQgUmVjaXBlU2VydmluZ3MgZnJvbSBcIi4vYWNmL1JlY2lwZVNlcnZpbmdzXCI7XG5pbXBvcnQgUmVjb21tZW5kZWRQb3N0cyBmcm9tIFwiLi9hY2YvcmVjb21tZW5kZWQvcG9zdHMvUmVjb21tZW5kZWRQb3N0c1wiO1xuaW1wb3J0IFJlYWRpbmdQcm9ncmVzcyBmcm9tIFwicmVhY3QtcmVhZGluZy1wcm9ncmVzc1wiXG5pbXBvcnQgQ29tbWVudHMgZnJvbSAnLi4vZ2xvYmFsL2NvbW1lbnRzL2luZGV4J1xuaW1wb3J0IFNvY2lhbE1lZGlhU2hhcmVCdXR0b25zIGZyb20gXCIuLi9nbG9iYWwvc29jaWFsLXNoYXJlL1NvY2lhbE1lZGlhU2hhcmVCdXR0b25zXCI7XG5pbXBvcnQgR29vZ2xlU3RydWN0dXJlZERhdGFGb3JSZWNpcGUgZnJvbSBcIi4uL2dsb2JhbC9tYXJrZXRpbmcvZ29vZ2xlL0dvb2dsZVN0cnVjdHVyZWREYXRhRm9yUmVjaXBlXCI7XG5pbXBvcnQgdHcgZnJvbSAndGFpbHdpbmQubWFjcm8nXG5pbXBvcnQgU3BvbnNvcmVkQmFkZ2UgZnJvbSBcIi4vYWNmL3Nwb25zb3JlZC9TcG9uc29yZWRCYWRnZVwiO1xuXG5pbXBvcnQgUmVhY3RJbnN0YVN0b3JpZXMgZnJvbSBcIi4uL2dsb2JhbC9tYXJrZXRpbmcvc3Rvcmllcy9SZWFjdEluc3RhU3Rvcmllc1wiXG5cbmNvbnN0IFBvc3QgPSAoe3N0YXRlLCBhY3Rpb25zLCBsaWJyYXJpZXN9KSA9PiB7XG4gICAgLy8gR2V0IGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IFVSTC5cbiAgICBjb25zdCBkYXRhID0gc3RhdGUuc291cmNlLmdldChzdGF0ZS5yb3V0ZXIubGluayk7XG4gICAgLy8gR2V0IHRoZSBkYXRhIG9mIHRoZSBwb3N0LlxuICAgIGNvbnN0IHBvc3QgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcblxuICAgIGNvbnN0IHBvc3RVcmwgPSBzdGF0ZS5mcm9udGl0eS51cmwgKyBzdGF0ZS5yb3V0ZXIubGluaztcblxuICAgIGNvbnN0IG1lZGlhID0gc3RhdGUuc291cmNlLmF0dGFjaG1lbnRbcG9zdC5mZWF0dXJlZF9tZWRpYV07XG5cbiAgICAvLyBHZXQgdGhlIGRhdGEgb2YgdGhlIGF1dGhvci5cbiAgICAvLyBjb25zdCBhdXRob3IgPSBzdGF0ZS5zb3VyY2UuYXV0aG9yW3Bvc3QuYXV0aG9yXTtcbiAgICAvLyBHZXQgYSBodW1hbiByZWFkYWJsZSBkYXRlLlxuICAgIC8vIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShwb3N0LmRhdGUpO1xuICAgIC8vIEdldCB0aGUgaHRtbDJyZWFjdCBjb21wb25lbnQuXG4gICAgY29uc3QgSHRtbDJSZWFjdCA9IGxpYnJhcmllcy5odG1sMnJlYWN0LkNvbXBvbmVudDtcblxuICAgIC8vIEdldCBhbGwgY2F0ZWdvcmllc1xuICAgIGNvbnN0IGFsbENhdGVnb3JpZXMgPSBzdGF0ZS5zb3VyY2UuY2F0ZWdvcnk7XG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW0ncyBjYXRlZ29yaWVzIGlzIGFuIGFycmF5IG9mIGVhY2ggY2F0ZWdvcnkgaWRcbiAgICAgKiBTbywgd2UnbGwgbG9vayB1cCB0aGUgZGV0YWlscyBvZiBlYWNoIGNhdGVnb3J5IGluIGFsbENhdGVnb3JpZXNcbiAgICAgKi9cbiAgICBjb25zdCBjYXRlZ29yaWVzID0gcG9zdC5jYXRlZ29yaWVzICYmIHBvc3QuY2F0ZWdvcmllcy5tYXAoKGNhdElkKSA9PiBhbGxDYXRlZ29yaWVzW2NhdElkXSk7XG5cbiAgICAvLyBHZXQgYWxsIHRhZ3NcbiAgICBjb25zdCBhbGxUYWdzID0gc3RhdGUuc291cmNlLnRhZztcbiAgICAvKipcbiAgICAgKiBUaGUgaXRlbSdzIGNhdGVnb3JpZXMgaXMgYW4gYXJyYXkgb2YgZWFjaCB0YWcgaWRcbiAgICAgKiBTbywgd2UnbGwgbG9vayB1cCB0aGUgZGV0YWlscyBvZiBlYWNoIHRhZyBpbiBhbGxUYWdzXG4gICAgICovXG4gICAgY29uc3QgdGFncyA9IHBvc3QudGFncyAmJiBwb3N0LnRhZ3MubWFwKCh0YWdJZCkgPT4gYWxsVGFnc1t0YWdJZF0pO1xuXG4gICAgLy8gR2V0IGFsbCBjdWlzaW5lXG4gICAgY29uc3QgYWxsQ3Vpc2luZSA9IHN0YXRlLnNvdXJjZS5jdWlzaW5lO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW0ncyBjdWlzaW5lIGlzIGFuIGFycmF5IG9mIGVhY2ggY3Vpc2luZSBpZFxuICAgICAqIFNvLCB3ZSdsbCBsb29rIHVwIHRoZSBkZXRhaWxzIG9mIGVhY2ggY3Vpc2luZSBpbiBhbGxDdWlzaW5lXG4gICAgICovXG4gICAgY29uc3QgY3Vpc2luZSA9IHBvc3QuY3Vpc2luZSAmJiBwb3N0LmN1aXNpbmUubWFwKChjdWlzaW5lSWQpID0+IGFsbEN1aXNpbmVbY3Vpc2luZUlkXSk7XG5cbiAgICAvLyBHZXQgYWxsIGRpZXRzXG4gICAgY29uc3QgYWxsRGlldHMgPSBzdGF0ZS5zb3VyY2UuZGlldHM7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaXRlbSdzIGRpZXRzIGlzIGFuIGFycmF5IG9mIGVhY2ggZGlldCBpZFxuICAgICAqIFNvLCB3ZSdsbCBsb29rIHVwIHRoZSBkZXRhaWxzIG9mIGVhY2ggZGlldCBpbiBhbGxEaWV0c1xuICAgICAqL1xuICAgIGNvbnN0IGRpZXRzID0gcG9zdC5kaWV0cyAmJiBwb3N0LmRpZXRzLm1hcCgoZGlldElkKSA9PiBhbGxEaWV0c1tkaWV0SWRdKTtcblxuICAgIC8vIEdldCBhbGwgZGlzaGVzXG4gICAgY29uc3QgYWxsRGlzaGVzID0gc3RhdGUuc291cmNlLmRpc2hlcztcblxuICAgIC8qKlxuICAgICAqIFRoZSBpdGVtJ3MgZGlzaGVzIGlzIGFuIGFycmF5IG9mIGVhY2ggZGlzaCBpZFxuICAgICAqIFNvLCB3ZSdsbCBsb29rIHVwIHRoZSBkZXRhaWxzIG9mIGVhY2ggZGlzaCBpbiBhbGxEaXNoZXNcbiAgICAgKi9cbiAgICBjb25zdCBkaXNoZXMgPSBwb3N0LmRpc2hlcyAmJiBwb3N0LmRpc2hlcy5tYXAoKGRpc2hJZCkgPT4gYWxsRGlzaGVzW2Rpc2hJZF0pO1xuXG4gICAgLy8gR2V0IGFsbCBtZWFsc1xuICAgIGNvbnN0IGFsbE1lYWxzID0gc3RhdGUuc291cmNlLm1lYWxzO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW0ncyBkaXNoZXMgaXMgYW4gYXJyYXkgb2YgZWFjaCBjYXRlZ29yeSBpZFxuICAgICAqIFNvLCB3ZSdsbCBsb29rIHVwIHRoZSBkZXRhaWxzIG9mIGVhY2ggZGlzaCBpbiBhbGxEaXNoZXNcbiAgICAgKi9cbiAgICBjb25zdCBtZWFscyA9IHBvc3QubWVhbHMgJiYgcG9zdC5tZWFscy5tYXAoKG1lYWxJZCkgPT4gYWxsTWVhbHNbbWVhbElkXSk7XG5cbiAgICAvKipcbiAgICAgKiBPbmNlIHRoZSBwb3N0IGhhcyBsb2FkZWQgaW4gdGhlIERPTSwgcHJlZmV0Y2ggYm90aCB0aGVcbiAgICAgKiBob21lIHBvc3RzIGFuZCB0aGUgbGlzdCBjb21wb25lbnQgc28gaWYgdGhlIHVzZXIgdmlzaXRzXG4gICAgICogdGhlIGhvbWUgcGFnZSwgZXZlcnl0aGluZyBpcyByZWFkeSBhbmQgaXQgbG9hZHMgaW5zdGFudGx5LlxuICAgICAqL1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGFjdGlvbnMuc291cmNlLmZldGNoKFwiL1wiKTtcbiAgICB9LCBbXSk7XG5cbiAgICAvLyBMb2FkIHRoZSBwb3N0LCBidXQgb25seSBpZiB0aGUgZGF0YSBpcyByZWFkeS5cbiAgICByZXR1cm4gZGF0YS5pc1JlYWR5ID8gKFxuICAgICAgICA8UG9zdEFydGljbGUgaWQ9XCJ0YXJnZXQtZWxcIj5cbiAgICAgICAgICAgIDxSZWFkaW5nUHJvZ3Jlc3NCYXIgdGFyZ2V0RWw9XCIjdGFyZ2V0LWVsXCIvPlxuXG4gICAgICAgICAgICB7LyogQWRkIEdvb2dsZSBTdHJ1Y3R1cmVkIGRhdGEgZm9yIHJlY2lwZSAqL31cbiAgICAgICAgICAgIHs8R29vZ2xlU3RydWN0dXJlZERhdGFGb3JSZWNpcGUgaWQ9e3Bvc3QuaWR9Lz59XG5cbiAgICAgICAgICAgIDxIZWFkZXI+XG4gICAgICAgICAgICAgICAgPFNlY3Rpb25Db250YWluZXI+XG4gICAgICAgICAgICAgICAgICAgIDxQb3N0VGl0bGUgY2xhc3NOYW1lPVwiaGVhZGluZy1zaXplLTFcIj57cG9zdC50aXRsZS5yZW5kZXJlZH08L1Bvc3RUaXRsZT5cblxuICAgICAgICAgICAgICAgICAgICB7LyogSWYgdGhlIHBvc3QgaGFzIGNhdGVnb3JpZXMsIHJlbmRlciB0aGUgY2F0ZWdvcmllcyAqL31cbiAgICAgICAgICAgICAgICAgICAge3Bvc3QuY2F0ZWdvcmllcyAmJiA8UG9zdENhdGVnb3JpZXMgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc30vPn1cblxuICAgICAgICAgICAgICAgICAgICB7LyogVGhlIHBvc3QncyBtZXRhZGF0YSBsaWtlIGF1dGhvciwgcHVibGlzaCBkYXRlLCBhbmQgY29tbWVudHMgKi99XG4gICAgICAgICAgICAgICAgICAgIDxQb3N0TWV0YSBpdGVtPXtwb3N0fS8+XG5cbiAgICAgICAgICAgICAgICAgICAge3N0YXRlLnRoZW1lLmZlYXR1cmVkTWVkaWEuc2hvd09uUG9zdCAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8RmVhdHVyZWRJbWFnZSBpZD17cG9zdC5mZWF0dXJlZF9tZWRpYX0gaXNTaW5nbGVQb3N0PXt0cnVlfS8+XG4gICAgICAgICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAgICAgICAgPFNvY2lhbE1lZGlhU2hhcmVCdXR0b25zXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw9e3Bvc3RVcmx9XG4gICAgICAgICAgICAgICAgICAgICAgICBtZWRpYT17bWVkaWEuc291cmNlX3VybH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD17bWVkaWEuYWx0X3RleHR9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17cG9zdC50aXRsZS5yZW5kZXJlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuPXtwb3N0LnRpdGxlLnJlbmRlcmVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzaHRhZz0nI3J1dGhnZW9yZ2lldidcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc2h0YWdzPXtbJ3J1dGhnZW9yZ2lldicsICdyZWNpcGVzJ119XG4gICAgICAgICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIElmIHRoZSBwb3N0IGhhcyB0YWdzLCByZW5kZXIgaXQgKi99XG4gICAgICAgICAgICAgICAgICAgIHtwb3N0LnRhZ3MgJiYgPFBvc3RUYWdzIHRhZ3M9e3RhZ3N9Lz59XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIGlmIHRoZSBwb3N0IGhhcyBzZXJ2aW5ncywgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLnNlcnZpbmdzJ10gJiYgPFJlY2lwZVNlcnZpbmdzIGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIHsvKiBpZiB0aGUgcG9zdCBoYXMgcHJlcGFyYXRpb24gdGltZSwgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLnByZXBhcmF0aW9uX3RpbWUnXSAmJiA8UmVjaXBlUHJlcGFyYXRpb25UaW1lIGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIHsvKiBpZiB0aGUgcG9zdCBoYXMgY29va2luZyB0aW1lLCByZW5kZXIgaXQgKi99XG4gICAgICAgICAgICAgICAgICAgIHtwb3N0LmFjZlsncG9zdGZpZWxkZ3JvdXAuY29va2luZ190aW1lJ10gJiYgPFJlY2lwZUNvb2tpbmdUaW1lIGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIDxQb3N0VGF4b25vbWllcz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDdWlzaW5lVGF4b25vbXk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qIElmIHRoZSBwb3N0IGhhcyBjdWlzaW5lLCByZW5kZXIgaXQgKi99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3Bvc3QuY3Vpc2luZSAmJiA8Q3Vpc2luZSBjdWlzaW5lPXtjdWlzaW5lfS8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9DdWlzaW5lVGF4b25vbXk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8RGlldHNUYXhvbm9teT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7LyogSWYgdGhlIHBvc3QgaGFzIGRpZXRzLCByZW5kZXIgaXQgKi99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3Bvc3QuZGlldHMgJiYgPERpZXRzIGRpZXRzPXtkaWV0c30vPn1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvRGlldHNUYXhvbm9teT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxEaXNoZXNUYXhvbm9teT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7LyogSWYgdGhlIHBvc3QgaGFzIGRpc2hlcywgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtwb3N0LmRpc2hlcyAmJiA8RGlzaGVzIGRpc2hlcz17ZGlzaGVzfS8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9EaXNoZXNUYXhvbm9teT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxNZWFsc1RheG9ub215PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsvKiBJZiB0aGUgcG9zdCBoYXMgZGlzaGVzLCByZW5kZXIgaXQgKi99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3Bvc3QubWVhbHMgJiYgPE1lYWxzIG1lYWxzPXttZWFsc30vPn1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTWVhbHNUYXhvbm9teT5cbiAgICAgICAgICAgICAgICAgICAgPC9Qb3N0VGF4b25vbWllcz5cblxuICAgICAgICAgICAgICAgICAgICB7Lyo8QWRCYW5uZXJCb2R5IG5hbWU9XCJiZWZvcmUtZGVzY3JpcHRpb24tYWRcIi8+Ki99XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIGlmIHRoZSBwb3N0IGhhcyBkZXNjcmlwdGlvbiwgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLmRlc2NyaXB0aW9uJ10gJiZcbiAgICAgICAgICAgICAgICAgICAgPFJlY2lwZURlc2NyaXB0aW9uVGl0bGU+SG93IHRvIGRvIGl0PyA8RGVzY3JpcHRpb25JY29uXG4gICAgICAgICAgICAgICAgICAgICAgICBzcmM9e1Byb2Zlc3Npb25hbENoZWZGZW1hbGV9IGFsdD1cIlByb2Zlc3Npb25hbCBDaGVmIEZlbWFsZVwiLz48L1JlY2lwZURlc2NyaXB0aW9uVGl0bGU+fVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLmRlc2NyaXB0aW9uJ10gJiYgPFJlY2lwZURlc2NyaXB0aW9uIGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIHsvKjxBZEJhbm5lckJvZHlNb2JpbGUgbmFtZT1cImJlZm9yZS1kZXNjcmlwdGlvbi1hZC1tb2JpbGVcIi8+Ki99XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIGlmIHRoZSBwb3N0IGhhcyBiYWRnZSAvIHNwb25zb3JlZCBsaW5rLCByZW5kZXIgaXQgKi99XG4gICAgICAgICAgICAgICAgICAgIHtwb3N0LmFjZlsncG9zdGZpZWxkZ3JvdXAuYmFkZ2UnXSAmJiA8U2VjdGlvblRpdGxlPlByb2R1Y3RzIGkgdXNlIG9yIGhhdmUgdHJpZWQ8L1NlY3Rpb25UaXRsZT59XG4gICAgICAgICAgICAgICAgICAgIHtwb3N0LmFjZlsncG9zdGZpZWxkZ3JvdXAuYmFkZ2UnXSAmJiA8QmFkZ2UgaWQ9e3Bvc3QuaWR9Lz59XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIElmIHRoZSBwb3N0IGhhcyBpbmdyZWRpZW50cywgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLmluZ3JlZGllbnRzJ10gJiZcbiAgICAgICAgICAgICAgICAgICAgPEluZ3JlZGllbnRzVGl0bGU+SW5ncmVkaWVudHMgPEluZ3JlZGllbnRzSWNvbiBzcmM9e0Vhc3lSZWNpcGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PVwiUmVjaXBlIEluZ3JlZGllbnRzXCIvPjwvSW5ncmVkaWVudHNUaXRsZT59XG4gICAgICAgICAgICAgICAgICAgIHtwb3N0LmFjZlsncG9zdGZpZWxkZ3JvdXAuaW5ncmVkaWVudHMnXSAmJiA8SW5ncmVkaWVudHMgaWQ9e3Bvc3QuaWR9Lz59XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIElmIHRoZSBwb3N0IGhhcyBlcXVpcG1lbnQsIHJlbmRlciBpdCAqL31cbiAgICAgICAgICAgICAgICAgICAge3Bvc3QuYWNmWydwb3N0ZmllbGRncm91cC5lcXVpcG1lbnQnXSAmJlxuICAgICAgICAgICAgICAgICAgICA8RXF1aXBtZW50VGl0bGU+RXF1aXBtZW50IDxFcXVpcG1lbnRJY29uIHNyYz17TW9kZXJuQ29va2luZ1Rvb2xzfSBhbHQ9XCJSZWNpcGUgRXF1aXBtZW50XCIvPlxuICAgICAgICAgICAgICAgICAgICA8L0VxdWlwbWVudFRpdGxlPn1cbiAgICAgICAgICAgICAgICAgICAge3Bvc3QuYWNmWydwb3N0ZmllbGRncm91cC5lcXVpcG1lbnQnXSAmJiA8RXF1aXBtZW50IGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIHsvKiBpZiB0aGUgcG9zdCBoYXMgYWZmaWxpYXRlIC8gc3BvbnNvcmVkIGxpbmssIHJlbmRlciBpdCAqL31cbiAgICAgICAgICAgICAgICAgICAge3Bvc3QuYWNmWydwb3N0ZmllbGRncm91cC5zcG9uc29yZWQnXSAmJiA8U3BvbnNvcmVkIGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIHsvKiBpZiB0aGUgcG9zdCBoYXMgdGlwcywgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLnRpcHMnXSAmJlxuICAgICAgICAgICAgICAgICAgICA8UmVjaXBlVGlwc1RpdGxlPlRpcHMgPFJlY2lwZVRpcHNJY29uIHNyYz17UmVjaXBlVGlwc0ljb25Qbmd9IGFsdD1cIlJlY2lwZSB0aXBzXCIvPlxuICAgICAgICAgICAgICAgICAgICA8L1JlY2lwZVRpcHNUaXRsZT59XG4gICAgICAgICAgICAgICAgICAgIHtwb3N0LmFjZlsncG9zdGZpZWxkZ3JvdXAudGlwcyddICYmIDxSZWNpcGVUaXBzIGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIHsvKiBpZiB0aGUgcG9zdCBoYXMgZGVzY3JpcHRpb24sIHJlbmRlciBpdCAqL31cbiAgICAgICAgICAgICAgICAgICAge3Bvc3QuYWNmWydwb3N0ZmllbGRncm91cC5ub3RlJ10gJiYgPFJlY2lwZU5vdGUgaWQ9e3Bvc3QuaWR9Lz59XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIGlmIHRoZSBwb3N0IGhhcyBhIFlvdVR1YmUgdmlkZW8sIHJlbmRlciBpdCAqL31cbiAgICAgICAgICAgICAgICAgICAge3Bvc3QuYWNmWydwb3N0ZmllbGRncm91cC52aWRlbyddICYmXG4gICAgICAgICAgICAgICAgICAgIDxSZWNpcGVZb3V0dWJlVmlkZW9UaXRsZT5XYXRjaCBob3cgaSBtYWtlIGl0IDxZb3VUdWJlSWNvbi8+XG4gICAgICAgICAgICAgICAgICAgIDwvUmVjaXBlWW91dHViZVZpZGVvVGl0bGU+fVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLnZpZGVvJ10gJiYgPFlvdXR1YmVWaWRlbyB2aWRlb0lkPXtwb3N0LmFjZlsncG9zdGZpZWxkZ3JvdXAudmlkZW8nXX0vPn1cblxuICAgICAgICAgICAgICAgICAgICB7LyogSWYgdGhlIHBvc3QgaGFzIGFuIGV4Y2VycHQgKHNob3J0IHN1bW1hcnkgdGV4dCksIHdlIHJlbmRlciBpdCAqL31cbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdC5jb250ZW50ICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UG9zdElubmVyIHNpemU9XCJtZWRpdW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEVudHJ5Q29udGVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxIdG1sMlJlYWN0IGh0bWw9e3Bvc3QuY29udGVudC5yZW5kZXJlZH0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0VudHJ5Q29udGVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1Bvc3RJbm5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIDxTb2NpYWxNZWRpYVNoYXJlQnV0dG9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsPXtwb3N0VXJsfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWE9e21lZGlhLnNvdXJjZV91cmx9XG4gICAgICAgICAgICAgICAgICAgICAgICBhbHQ9e21lZGlhLmFsdF90ZXh0fVxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e3Bvc3QudGl0bGUucmVuZGVyZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbj17cG9zdC50aXRsZS5yZW5kZXJlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc2h0YWc9JyNydXRoZ2VvcmdpZXYnXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNodGFncz17WydydXRoZ2VvcmdpZXYnLCAncmVjaXBlcyddfVxuICAgICAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgICAgICAgIHs8Q29tbWVudHMgcG9zdElkPXtwb3N0LmlkfSBpZD1cImNvbW1lbnRzXCIvPn1cbiAgICAgICAgICAgICAgICA8L1NlY3Rpb25Db250YWluZXI+XG4gICAgICAgICAgICA8L0hlYWRlcj5cblxuICAgICAgICAgICAgey8qIGlmIHRoZSBwb3N0IGhhcyBzcG9uc29yZWQgYmFkZ2UgLyBzcG9uc29yZWQgbGluaywgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAge3Bvc3QuYWNmWydwb3N0ZmllbGRncm91cC5zcG9uc29yZWRfYmFkZ2UnXSAmJiA8U3BvbnNvcmVkQmFkZ2UgaWQ9e3Bvc3QuaWR9Lz59XG5cbiAgICAgICAgICAgIHsvKlxuICAgICAgICogSWYgdGhlIHdhbnQgdG8gc2hvdyBmZWF0dXJlZCBtZWRpYSBpbiB0aGVcbiAgICAgICAqIGxpc3Qgb2YgZmVhdHVyZWQgcG9zdHMsIHdlIHJlbmRlciB0aGUgbWVkaWEuXG4gICAgICAgKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgPC9Qb3N0QXJ0aWNsZT5cbiAgICApIDogbnVsbDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoUG9zdCk7XG5cbmNvbnN0IEhlYWRlciA9IHN0eWxlZChQb3N0SGVhZGVyKWBcbmJhY2tncm91bmQtY29sb3I6ICNmZmY7XG5tYXJnaW46IDA7XG5wYWRkaW5nOiA0cmVtIDA7XG5AbWVkaWEgKG1pbi13aWR0aDogNzAwcHgpIHtcbnBhZGRpbmc6IDhyZW0gMDtcbn1cbmA7XG5cbmNvbnN0IFBvc3RBcnRpY2xlID0gc3R5bGVkKF9Qb3N0KWBcbnBhZGRpbmctdG9wOiAwICFpbXBvcnRhbnQ7XG5gO1xuXG5jb25zdCBGZWF0dXJlZEltYWdlID0gc3R5bGVkKEZlYXR1cmVkTWVkaWEpYCAke3R3YG1heC1oLWF1dG9gfSBgO1xuXG5jb25zdCBQb3N0VGl0bGUgPSBzdHlsZWQoJ2gxJylgICR7dHdgdGV4dC02eGwgc206dGV4dC04eGwgYH1gO1xuXG5jb25zdCBTZWN0aW9uVGl0bGUgPSBzdHlsZWQoJ2gyJylgICR7dHdgdGV4dC1ncmF5LTgwMCBmb250LW5vcm1hbCBweS02IHB4LTIgdXBwZXJjYXNlYH1gO1xuY29uc3QgSW5ncmVkaWVudHNUaXRsZSA9IHN0eWxlZCgnaDInKWAgJHt0d2B0ZXh0LWdyYXktODAwIGZvbnQtbm9ybWFsIHB5LTYgcHgtMiB1cHBlcmNhc2VgfWA7XG5jb25zdCBFcXVpcG1lbnRUaXRsZSA9IHN0eWxlZCgnaDInKWAgJHt0d2B0ZXh0LWdyYXktODAwIGZvbnQtbm9ybWFsIHB5LTYgcHgtMiB1cHBlcmNhc2VgfWA7XG5jb25zdCBSZWNpcGVEZXNjcmlwdGlvblRpdGxlID0gc3R5bGVkKCdoMicpYCAke3R3YHRleHQtZ3JheS04MDAgZm9udC1ub3JtYWwgcHktNiBweC0yIHVwcGVyY2FzZWB9YDtcbmNvbnN0IFJlY2lwZVRpcHNUaXRsZSA9IHN0eWxlZCgnaDInKWAgJHt0d2B0ZXh0LWdyYXktODAwIHB5LTYgcHgtMiBmb250LW5vcm1hbCB1cHBlcmNhc2VgfWA7XG5jb25zdCBSZWNpcGVZb3V0dWJlVmlkZW9UaXRsZSA9IHN0eWxlZCgnaDInKWAgJHt0d2B0ZXh0LWdyYXktODAwIGZvbnQtbm9ybWFsIHB5LTYgcHgtMiB1cHBlcmNhc2VgfWA7XG5jb25zdCBSZWNvbW1lbmRlZFBvc3RzVGl0bGUgPSBzdHlsZWQoJ2gyJylgICR7dHdgdGV4dC1ncmF5LTgwMCBmb250LW5vcm1hbCB0ZXh0LWNlbnRlciBweS02IHB4LTIgdXBwZXJjYXNlYH1gO1xuY29uc3QgQWRCYW5uZXJCb2R5ID0gc3R5bGVkKFNsb3QpYCAke3R3YGZsZXgganVzdGlmeS1jZW50ZXIgbS0xMCBtZDpoaWRkZW5gfWA7XG5jb25zdCBBZEJhbm5lckJvZHlNb2JpbGUgPSBzdHlsZWQoU2xvdClgICR7dHdgZmxleCBqdXN0aWZ5LWNlbnRlciBtLTEwIG1kOmhpZGRlbmB9YDtcblxuY29uc3QgUG9zdFRheG9ub21pZXMgPSBzdHlsZWQoJ2RpdicpYCAke3R3YGZsZXggY29udGVudC1zdGFydCB0ZXh0LWxlZnQgc206ZmxleC13cmFwIGZsZXgtd3JhcCBoLTMwIGJnLWdyYXktMjAwIG15LTEwIHAtMTBgfWA7XG5jb25zdCBDdWlzaW5lVGF4b25vbXkgPSBzdHlsZWQoJ2RpdicpYCAke3R3YHctZnVsbCBwLTFgfWA7XG5jb25zdCBEaWV0c1RheG9ub215ID0gc3R5bGVkKCdkaXYnKWAgJHt0d2B3LWZ1bGwgcC0xYH1gO1xuY29uc3QgRGlzaGVzVGF4b25vbXkgPSBzdHlsZWQoJ2RpdicpYCAke3R3YHctZnVsbCBwLTFgfWA7XG5jb25zdCBNZWFsc1RheG9ub215ID0gc3R5bGVkKCdkaXYnKWAgJHt0d2B3LWZ1bGwgcC0xYH1gO1xuY29uc3QgSW5ncmVkaWVudHNJY29uID0gc3R5bGVkKCdpbWcnKWAgJHt0d2BpbmxpbmUtYmxvY2sgdy0yNCBhbGlnbi1ib3R0b21gfWA7XG5jb25zdCBFcXVpcG1lbnRJY29uID0gc3R5bGVkKCdpbWcnKWAgJHt0d2BpbmxpbmUtYmxvY2sgdy0yNCBhbGlnbi1ib3R0b21gfWA7XG5jb25zdCBEZXNjcmlwdGlvbkljb24gPSBzdHlsZWQoJ2ltZycpYCAke3R3YGlubGluZS1ibG9jayB3LTI0IGFsaWduLWJvdHRvbWB9YDtcbmNvbnN0IFJlY2lwZVRpcHNJY29uID0gc3R5bGVkKCdpbWcnKWAgJHt0d2BpbmxpbmUtYmxvY2sgdy0yNCBhbGlnbi1ib3R0b21gfWA7XG5jb25zdCBIaWdMaWdodGVkVGV4dCA9IHN0eWxlZCgnc3BhbicpYCAke3R3YGJnLWdyYXktMjAwIGZvbnQtbm9ybWFsIHB4LTUgcm91bmRlZC1mdWxsYH1gO1xuY29uc3QgUmVhZGluZ1Byb2dyZXNzQmFyID0gc3R5bGVkKFJlYWRpbmdQcm9ncmVzcylgXG5oZWlnaHQ6IDAuMnJlbTtcbnRyYW5zaXRpb246IHdpZHRoIDAuMnMgbGluZWFyO1xuYDtcblxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var FeaturedImage=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_featured_media__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{target:\"e62fgu22\",label:\"FeaturedImage\"})({\"maxHeight\":_tailwindConfig.theme.maxHeight[\"auto\"]}, false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var PostTitle=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('h1',{target:\"e62fgu23\",label:\"PostTitle\"})(Object.assign(tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.resolveStyle(_tailwindConfig,[{\"prop\":\"color\",\"config\":\"textColor\"},{\"prop\":\"fontSize\",\"config\":\"fontSize\"}],\"6xl\"),{[tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.stringifyScreen(_tailwindConfig,\"sm\")]:Object.assign(tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.resolveStyle(_tailwindConfig,[{\"prop\":\"color\",\"config\":\"textColor\"},{\"prop\":\"fontSize\",\"config\":\"fontSize\"}],\"8xl\"))}), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var SectionTitle=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('h2',{target:\"e62fgu24\",label:\"SectionTitle\"})(Object.assign(tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.resolveStyle(_tailwindConfig,[{\"prop\":\"color\",\"config\":\"textColor\"},{\"prop\":\"fontSize\",\"config\":\"fontSize\"}],\"gray-800\"),tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.resolveStyle(_tailwindConfig,[{\"prop\":\"fontWeight\",\"config\":\"fontWeight\"},{\"prop\":\"fontFamily\",\"config\":\"fontFamily\"}],\"normal\"),{\"paddingTop\":_tailwindConfig.theme.padding[\"6\"],\"paddingBottom\":_tailwindConfig.theme.padding[\"6\"],\"paddingLeft\":_tailwindConfig.theme.padding[\"2\"],\"paddingRight\":_tailwindConfig.theme.padding[\"2\"],\"textTransform\":\"uppercase\"}), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var IngredientsTitle=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('h2',{target:\"e62fgu25\",label:\"IngredientsTitle\"})(Object.assign(tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.resolveStyle(_tailwindConfig,[{\"prop\":\"color\",\"config\":\"textColor\"},{\"prop\":\"fontSize\",\"config\":\"fontSize\"}],\"gray-800\"),tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.resolveStyle(_tailwindConfig,[{\"prop\":\"fontWeight\",\"config\":\"fontWeight\"},{\"prop\":\"fontFamily\",\"config\":\"fontFamily\"}],\"normal\"),{\"paddingTop\":_tailwindConfig.theme.padding[\"6\"],\"paddingBottom\":_tailwindConfig.theme.padding[\"6\"],\"paddingLeft\":_tailwindConfig.theme.padding[\"2\"],\"paddingRight\":_tailwindConfig.theme.padding[\"2\"],\"textTransform\":\"uppercase\"}), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var EquipmentTitle=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('h2',{target:\"e62fgu26\",label:\"EquipmentTitle\"})(Object.assign(tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.resolveStyle(_tailwindConfig,[{\"prop\":\"color\",\"config\":\"textColor\"},{\"prop\":\"fontSize\",\"config\":\"fontSize\"}],\"gray-800\"),tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.resolveStyle(_tailwindConfig,[{\"prop\":\"fontWeight\",\"config\":\"fontWeight\"},{\"prop\":\"fontFamily\",\"config\":\"fontFamily\"}],\"normal\"),{\"paddingTop\":_tailwindConfig.theme.padding[\"6\"],\"paddingBottom\":_tailwindConfig.theme.padding[\"6\"],\"paddingLeft\":_tailwindConfig.theme.padding[\"2\"],\"paddingRight\":_tailwindConfig.theme.padding[\"2\"],\"textTransform\":\"uppercase\"}), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var RecipeDescriptionTitle=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('h2',{target:\"e62fgu27\",label:\"RecipeDescriptionTitle\"})(Object.assign(tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.resolveStyle(_tailwindConfig,[{\"prop\":\"color\",\"config\":\"textColor\"},{\"prop\":\"fontSize\",\"config\":\"fontSize\"}],\"gray-800\"),tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.resolveStyle(_tailwindConfig,[{\"prop\":\"fontWeight\",\"config\":\"fontWeight\"},{\"prop\":\"fontFamily\",\"config\":\"fontFamily\"}],\"normal\"),{\"paddingTop\":_tailwindConfig.theme.padding[\"6\"],\"paddingBottom\":_tailwindConfig.theme.padding[\"6\"],\"paddingLeft\":_tailwindConfig.theme.padding[\"2\"],\"paddingRight\":_tailwindConfig.theme.padding[\"2\"],\"textTransform\":\"uppercase\"}), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var RecipeTipsTitle=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('h2',{target:\"e62fgu28\",label:\"RecipeTipsTitle\"})(Object.assign(tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.resolveStyle(_tailwindConfig,[{\"prop\":\"color\",\"config\":\"textColor\"},{\"prop\":\"fontSize\",\"config\":\"fontSize\"}],\"gray-800\"),{\"paddingTop\":_tailwindConfig.theme.padding[\"6\"],\"paddingBottom\":_tailwindConfig.theme.padding[\"6\"],\"paddingLeft\":_tailwindConfig.theme.padding[\"2\"],\"paddingRight\":_tailwindConfig.theme.padding[\"2\"]},tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.resolveStyle(_tailwindConfig,[{\"prop\":\"fontWeight\",\"config\":\"fontWeight\"},{\"prop\":\"fontFamily\",\"config\":\"fontFamily\"}],\"normal\"),{\"textTransform\":\"uppercase\"}), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var RecipeYoutubeVideoTitle=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('h2',{target:\"e62fgu29\",label:\"RecipeYoutubeVideoTitle\"})(Object.assign(tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.resolveStyle(_tailwindConfig,[{\"prop\":\"color\",\"config\":\"textColor\"},{\"prop\":\"fontSize\",\"config\":\"fontSize\"}],\"gray-800\"),tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.resolveStyle(_tailwindConfig,[{\"prop\":\"fontWeight\",\"config\":\"fontWeight\"},{\"prop\":\"fontFamily\",\"config\":\"fontFamily\"}],\"normal\"),{\"paddingTop\":_tailwindConfig.theme.padding[\"6\"],\"paddingBottom\":_tailwindConfig.theme.padding[\"6\"],\"paddingLeft\":_tailwindConfig.theme.padding[\"2\"],\"paddingRight\":_tailwindConfig.theme.padding[\"2\"],\"textTransform\":\"uppercase\"}), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var RecommendedPostsTitle=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('h2',{target:\"e62fgu210\",label:\"RecommendedPostsTitle\"})(Object.assign(tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.resolveStyle(_tailwindConfig,[{\"prop\":\"color\",\"config\":\"textColor\"},{\"prop\":\"fontSize\",\"config\":\"fontSize\"}],\"gray-800\"),tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.resolveStyle(_tailwindConfig,[{\"prop\":\"fontWeight\",\"config\":\"fontWeight\"},{\"prop\":\"fontFamily\",\"config\":\"fontFamily\"}],\"normal\"),{\"textAlign\":\"center\",\"paddingTop\":_tailwindConfig.theme.padding[\"6\"],\"paddingBottom\":_tailwindConfig.theme.padding[\"6\"],\"paddingLeft\":_tailwindConfig.theme.padding[\"2\"],\"paddingRight\":_tailwindConfig.theme.padding[\"2\"],\"textTransform\":\"uppercase\"}), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var AdBannerBody=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(frontity__WEBPACK_IMPORTED_MODULE_3__[\"Slot\"],{target:\"e62fgu211\",label:\"AdBannerBody\"})({\"display\":\"flex\",\"justifyContent\":\"center\",\"margin\":_tailwindConfig.theme.margin[\"10\"],[tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.stringifyScreen(_tailwindConfig,\"md\")]:{\"display\":\"none\"}}, false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var AdBannerBodyMobile=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(frontity__WEBPACK_IMPORTED_MODULE_3__[\"Slot\"],{target:\"e62fgu212\",label:\"AdBannerBodyMobile\"})({\"display\":\"flex\",\"justifyContent\":\"center\",\"margin\":_tailwindConfig.theme.margin[\"10\"],[tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.stringifyScreen(_tailwindConfig,\"md\")]:{\"display\":\"none\"}}, false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var PostTaxonomies=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('div',{target:\"e62fgu213\",label:\"PostTaxonomies\"})(Object.assign({\"display\":\"flex\",\"alignContent\":\"flex-start\",\"textAlign\":\"left\",[tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.stringifyScreen(_tailwindConfig,\"sm\")]:{\"flexWrap\":\"wrap\"},\"flexWrap\":\"wrap\",\"height\":_tailwindConfig.theme.height[\"30\"]},tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.resolveStyle(_tailwindConfig,[{\"prop\":\"backgroundColor\",\"config\":\"backgroundColor\"},{\"prop\":\"backgroundSize\",\"config\":\"backgroundSize\"},{\"prop\":\"backgroundPosition\",\"config\":\"backgroundPosition\"}],\"gray-200\"),{\"marginTop\":_tailwindConfig.theme.margin[\"10\"],\"marginBottom\":_tailwindConfig.theme.margin[\"10\"],\"padding\":_tailwindConfig.theme.padding[\"10\"]}), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var CuisineTaxonomy=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('div',{target:\"e62fgu214\",label:\"CuisineTaxonomy\"})({\"width\":_tailwindConfig.theme.width[\"full\"],\"padding\":_tailwindConfig.theme.padding[\"1\"]}, false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var DietsTaxonomy=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('div',{target:\"e62fgu215\",label:\"DietsTaxonomy\"})({\"width\":_tailwindConfig.theme.width[\"full\"],\"padding\":_tailwindConfig.theme.padding[\"1\"]}, false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var DishesTaxonomy=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('div',{target:\"e62fgu216\",label:\"DishesTaxonomy\"})({\"width\":_tailwindConfig.theme.width[\"full\"],\"padding\":_tailwindConfig.theme.padding[\"1\"]}, false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kZWphbmdlb3JnaWV2L0NvZGUvcnV0aGdlb3JnaWV2LWZyb250aXR5L3BhY2thZ2VzL3R3ZW50eXR3ZW50eS10aGVtZS9zcmMvY29tcG9uZW50cy9wb3N0L3Bvc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeVNvQyIsImZpbGUiOiIvVXNlcnMvZGVqYW5nZW9yZ2lldi9Db2RlL3J1dGhnZW9yZ2lldi1mcm9udGl0eS9wYWNrYWdlcy90d2VudHl0d2VudHktdGhlbWUvc3JjL2NvbXBvbmVudHMvcG9zdC9wb3N0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzdHlsZWQsIGNvbm5lY3QsIFNsb3R9IGZyb20gXCJmcm9udGl0eVwiO1xuaW1wb3J0IFJlYWN0LCB7dXNlRWZmZWN0fSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBGZWF0dXJlZE1lZGlhIGZyb20gXCIuL2ZlYXR1cmVkLW1lZGlhXCI7XG5pbXBvcnQge1xuICAgIEVudHJ5Q29udGVudCxcbiAgICBQb3N0IGFzIF9Qb3N0LFxuICAgIFBvc3RIZWFkZXIsXG4gICAgUG9zdElubmVyLFxuICAgIFNlY3Rpb25Db250YWluZXIsXG59IGZyb20gXCIuL3Bvc3QtaXRlbVwiO1xuaW1wb3J0IFBvc3RDYXRlZ29yaWVzIGZyb20gXCIuL3Bvc3QtY2F0ZWdvcmllc1wiO1xuaW1wb3J0IFBvc3RNZXRhIGZyb20gXCIuL3Bvc3QtbWV0YVwiO1xuaW1wb3J0IFBvc3RUYWdzIGZyb20gXCIuL3Bvc3QtdGFnc1wiO1xuaW1wb3J0IEluZ3JlZGllbnRzIGZyb20gXCIuL2FjZi9pbmdyZWRpZW50cy9JbmdyZWRpZW50c1wiO1xuaW1wb3J0IFNwb25zb3JlZCBmcm9tIFwiLi9hY2Yvc3BvbnNvcmVkL1Nwb25zb3JlZFwiO1xuaW1wb3J0IEJhZGdlIGZyb20gXCIuL2FjZi9iYWRnZXMvQmFkZ2VcIjtcbmltcG9ydCBFcXVpcG1lbnQgZnJvbSBcIi4vYWNmL2VxdWlwbWVudC9FcXVpcG1lbnRcIjtcbmltcG9ydCBSZWNpcGVEZXNjcmlwdGlvbiBmcm9tIFwiLi9hY2YvUmVjaXBlRGVzY3JpcHRpb25cIjtcbmltcG9ydCBSZWNpcGVOb3RlIGZyb20gXCIuL2FjZi9SZWNpcGVOb3RlXCI7XG5pbXBvcnQgUmVjaXBlVGlwcyBmcm9tIFwiLi9hY2YvdGlwcy9SZWNpcGVUaXBzXCI7XG5pbXBvcnQgQ3Vpc2luZSBmcm9tIFwiLi9hY2YvY3Vpc2luZS9DdWlzaW5lXCI7XG5pbXBvcnQgRGlldHMgZnJvbSBcIi4vYWNmL2RpZXRzL0RpZXRzXCI7XG5pbXBvcnQgRGlzaGVzIGZyb20gXCIuL2FjZi9kaXNoZXMvRGlzaGVzXCI7XG5pbXBvcnQgTWVhbHMgZnJvbSBcIi4vYWNmL21lYWxzL01lYWxzXCI7XG5pbXBvcnQgWW91dHViZVZpZGVvIGZyb20gXCIuL2FjZi9Zb3V0dWJlVmlkZW9cIjtcbmltcG9ydCBZb3VUdWJlSWNvbiBmcm9tIFwiLi4vZ2xvYmFsL2ljb25zL1lvdVR1YmVJY29uXCI7XG5pbXBvcnQgRWFzeVJlY2lwZSBmcm9tIFwiLi4vZ2xvYmFsL2ljb25zL3BuZy9FYXN5UmVjaXBlLnBuZ1wiXG5pbXBvcnQgTW9kZXJuQ29va2luZ1Rvb2xzIGZyb20gXCIuLi9nbG9iYWwvaWNvbnMvcG5nL01vZGVybkNvb2tpbmdUb29scy5wbmdcIlxuaW1wb3J0IFByb2Zlc3Npb25hbENoZWZGZW1hbGUgZnJvbSBcIi4uL2dsb2JhbC9pY29ucy9wbmcvUHJvZmVzc2lvbmFsQ2hlZkZlbWFsZS5wbmdcIlxuaW1wb3J0IFJlY2lwZVRpcHNJY29uUG5nIGZyb20gXCIuLi9nbG9iYWwvaWNvbnMvcG5nL1JlY2lwZVRpcHMucG5nXCJcbmltcG9ydCBSZWNpcGVQcmVwYXJhdGlvblRpbWUgZnJvbSBcIi4vYWNmL1JlY2lwZVByZXBhcmF0aW9uVGltZVwiXG5pbXBvcnQgUmVjaXBlQ29va2luZ1RpbWUgZnJvbSBcIi4vYWNmL1JlY2lwZUNvb2tpbmdUaW1lXCI7XG5pbXBvcnQgUmVjaXBlU2VydmluZ3MgZnJvbSBcIi4vYWNmL1JlY2lwZVNlcnZpbmdzXCI7XG5pbXBvcnQgUmVjb21tZW5kZWRQb3N0cyBmcm9tIFwiLi9hY2YvcmVjb21tZW5kZWQvcG9zdHMvUmVjb21tZW5kZWRQb3N0c1wiO1xuaW1wb3J0IFJlYWRpbmdQcm9ncmVzcyBmcm9tIFwicmVhY3QtcmVhZGluZy1wcm9ncmVzc1wiXG5pbXBvcnQgQ29tbWVudHMgZnJvbSAnLi4vZ2xvYmFsL2NvbW1lbnRzL2luZGV4J1xuaW1wb3J0IFNvY2lhbE1lZGlhU2hhcmVCdXR0b25zIGZyb20gXCIuLi9nbG9iYWwvc29jaWFsLXNoYXJlL1NvY2lhbE1lZGlhU2hhcmVCdXR0b25zXCI7XG5pbXBvcnQgR29vZ2xlU3RydWN0dXJlZERhdGFGb3JSZWNpcGUgZnJvbSBcIi4uL2dsb2JhbC9tYXJrZXRpbmcvZ29vZ2xlL0dvb2dsZVN0cnVjdHVyZWREYXRhRm9yUmVjaXBlXCI7XG5pbXBvcnQgdHcgZnJvbSAndGFpbHdpbmQubWFjcm8nXG5pbXBvcnQgU3BvbnNvcmVkQmFkZ2UgZnJvbSBcIi4vYWNmL3Nwb25zb3JlZC9TcG9uc29yZWRCYWRnZVwiO1xuXG5pbXBvcnQgUmVhY3RJbnN0YVN0b3JpZXMgZnJvbSBcIi4uL2dsb2JhbC9tYXJrZXRpbmcvc3Rvcmllcy9SZWFjdEluc3RhU3Rvcmllc1wiXG5cbmNvbnN0IFBvc3QgPSAoe3N0YXRlLCBhY3Rpb25zLCBsaWJyYXJpZXN9KSA9PiB7XG4gICAgLy8gR2V0IGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IFVSTC5cbiAgICBjb25zdCBkYXRhID0gc3RhdGUuc291cmNlLmdldChzdGF0ZS5yb3V0ZXIubGluayk7XG4gICAgLy8gR2V0IHRoZSBkYXRhIG9mIHRoZSBwb3N0LlxuICAgIGNvbnN0IHBvc3QgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcblxuICAgIGNvbnN0IHBvc3RVcmwgPSBzdGF0ZS5mcm9udGl0eS51cmwgKyBzdGF0ZS5yb3V0ZXIubGluaztcblxuICAgIGNvbnN0IG1lZGlhID0gc3RhdGUuc291cmNlLmF0dGFjaG1lbnRbcG9zdC5mZWF0dXJlZF9tZWRpYV07XG5cbiAgICAvLyBHZXQgdGhlIGRhdGEgb2YgdGhlIGF1dGhvci5cbiAgICAvLyBjb25zdCBhdXRob3IgPSBzdGF0ZS5zb3VyY2UuYXV0aG9yW3Bvc3QuYXV0aG9yXTtcbiAgICAvLyBHZXQgYSBodW1hbiByZWFkYWJsZSBkYXRlLlxuICAgIC8vIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShwb3N0LmRhdGUpO1xuICAgIC8vIEdldCB0aGUgaHRtbDJyZWFjdCBjb21wb25lbnQuXG4gICAgY29uc3QgSHRtbDJSZWFjdCA9IGxpYnJhcmllcy5odG1sMnJlYWN0LkNvbXBvbmVudDtcblxuICAgIC8vIEdldCBhbGwgY2F0ZWdvcmllc1xuICAgIGNvbnN0IGFsbENhdGVnb3JpZXMgPSBzdGF0ZS5zb3VyY2UuY2F0ZWdvcnk7XG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW0ncyBjYXRlZ29yaWVzIGlzIGFuIGFycmF5IG9mIGVhY2ggY2F0ZWdvcnkgaWRcbiAgICAgKiBTbywgd2UnbGwgbG9vayB1cCB0aGUgZGV0YWlscyBvZiBlYWNoIGNhdGVnb3J5IGluIGFsbENhdGVnb3JpZXNcbiAgICAgKi9cbiAgICBjb25zdCBjYXRlZ29yaWVzID0gcG9zdC5jYXRlZ29yaWVzICYmIHBvc3QuY2F0ZWdvcmllcy5tYXAoKGNhdElkKSA9PiBhbGxDYXRlZ29yaWVzW2NhdElkXSk7XG5cbiAgICAvLyBHZXQgYWxsIHRhZ3NcbiAgICBjb25zdCBhbGxUYWdzID0gc3RhdGUuc291cmNlLnRhZztcbiAgICAvKipcbiAgICAgKiBUaGUgaXRlbSdzIGNhdGVnb3JpZXMgaXMgYW4gYXJyYXkgb2YgZWFjaCB0YWcgaWRcbiAgICAgKiBTbywgd2UnbGwgbG9vayB1cCB0aGUgZGV0YWlscyBvZiBlYWNoIHRhZyBpbiBhbGxUYWdzXG4gICAgICovXG4gICAgY29uc3QgdGFncyA9IHBvc3QudGFncyAmJiBwb3N0LnRhZ3MubWFwKCh0YWdJZCkgPT4gYWxsVGFnc1t0YWdJZF0pO1xuXG4gICAgLy8gR2V0IGFsbCBjdWlzaW5lXG4gICAgY29uc3QgYWxsQ3Vpc2luZSA9IHN0YXRlLnNvdXJjZS5jdWlzaW5lO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW0ncyBjdWlzaW5lIGlzIGFuIGFycmF5IG9mIGVhY2ggY3Vpc2luZSBpZFxuICAgICAqIFNvLCB3ZSdsbCBsb29rIHVwIHRoZSBkZXRhaWxzIG9mIGVhY2ggY3Vpc2luZSBpbiBhbGxDdWlzaW5lXG4gICAgICovXG4gICAgY29uc3QgY3Vpc2luZSA9IHBvc3QuY3Vpc2luZSAmJiBwb3N0LmN1aXNpbmUubWFwKChjdWlzaW5lSWQpID0+IGFsbEN1aXNpbmVbY3Vpc2luZUlkXSk7XG5cbiAgICAvLyBHZXQgYWxsIGRpZXRzXG4gICAgY29uc3QgYWxsRGlldHMgPSBzdGF0ZS5zb3VyY2UuZGlldHM7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaXRlbSdzIGRpZXRzIGlzIGFuIGFycmF5IG9mIGVhY2ggZGlldCBpZFxuICAgICAqIFNvLCB3ZSdsbCBsb29rIHVwIHRoZSBkZXRhaWxzIG9mIGVhY2ggZGlldCBpbiBhbGxEaWV0c1xuICAgICAqL1xuICAgIGNvbnN0IGRpZXRzID0gcG9zdC5kaWV0cyAmJiBwb3N0LmRpZXRzLm1hcCgoZGlldElkKSA9PiBhbGxEaWV0c1tkaWV0SWRdKTtcblxuICAgIC8vIEdldCBhbGwgZGlzaGVzXG4gICAgY29uc3QgYWxsRGlzaGVzID0gc3RhdGUuc291cmNlLmRpc2hlcztcblxuICAgIC8qKlxuICAgICAqIFRoZSBpdGVtJ3MgZGlzaGVzIGlzIGFuIGFycmF5IG9mIGVhY2ggZGlzaCBpZFxuICAgICAqIFNvLCB3ZSdsbCBsb29rIHVwIHRoZSBkZXRhaWxzIG9mIGVhY2ggZGlzaCBpbiBhbGxEaXNoZXNcbiAgICAgKi9cbiAgICBjb25zdCBkaXNoZXMgPSBwb3N0LmRpc2hlcyAmJiBwb3N0LmRpc2hlcy5tYXAoKGRpc2hJZCkgPT4gYWxsRGlzaGVzW2Rpc2hJZF0pO1xuXG4gICAgLy8gR2V0IGFsbCBtZWFsc1xuICAgIGNvbnN0IGFsbE1lYWxzID0gc3RhdGUuc291cmNlLm1lYWxzO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW0ncyBkaXNoZXMgaXMgYW4gYXJyYXkgb2YgZWFjaCBjYXRlZ29yeSBpZFxuICAgICAqIFNvLCB3ZSdsbCBsb29rIHVwIHRoZSBkZXRhaWxzIG9mIGVhY2ggZGlzaCBpbiBhbGxEaXNoZXNcbiAgICAgKi9cbiAgICBjb25zdCBtZWFscyA9IHBvc3QubWVhbHMgJiYgcG9zdC5tZWFscy5tYXAoKG1lYWxJZCkgPT4gYWxsTWVhbHNbbWVhbElkXSk7XG5cbiAgICAvKipcbiAgICAgKiBPbmNlIHRoZSBwb3N0IGhhcyBsb2FkZWQgaW4gdGhlIERPTSwgcHJlZmV0Y2ggYm90aCB0aGVcbiAgICAgKiBob21lIHBvc3RzIGFuZCB0aGUgbGlzdCBjb21wb25lbnQgc28gaWYgdGhlIHVzZXIgdmlzaXRzXG4gICAgICogdGhlIGhvbWUgcGFnZSwgZXZlcnl0aGluZyBpcyByZWFkeSBhbmQgaXQgbG9hZHMgaW5zdGFudGx5LlxuICAgICAqL1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGFjdGlvbnMuc291cmNlLmZldGNoKFwiL1wiKTtcbiAgICB9LCBbXSk7XG5cbiAgICAvLyBMb2FkIHRoZSBwb3N0LCBidXQgb25seSBpZiB0aGUgZGF0YSBpcyByZWFkeS5cbiAgICByZXR1cm4gZGF0YS5pc1JlYWR5ID8gKFxuICAgICAgICA8UG9zdEFydGljbGUgaWQ9XCJ0YXJnZXQtZWxcIj5cbiAgICAgICAgICAgIDxSZWFkaW5nUHJvZ3Jlc3NCYXIgdGFyZ2V0RWw9XCIjdGFyZ2V0LWVsXCIvPlxuXG4gICAgICAgICAgICB7LyogQWRkIEdvb2dsZSBTdHJ1Y3R1cmVkIGRhdGEgZm9yIHJlY2lwZSAqL31cbiAgICAgICAgICAgIHs8R29vZ2xlU3RydWN0dXJlZERhdGFGb3JSZWNpcGUgaWQ9e3Bvc3QuaWR9Lz59XG5cbiAgICAgICAgICAgIDxIZWFkZXI+XG4gICAgICAgICAgICAgICAgPFNlY3Rpb25Db250YWluZXI+XG4gICAgICAgICAgICAgICAgICAgIDxQb3N0VGl0bGUgY2xhc3NOYW1lPVwiaGVhZGluZy1zaXplLTFcIj57cG9zdC50aXRsZS5yZW5kZXJlZH08L1Bvc3RUaXRsZT5cblxuICAgICAgICAgICAgICAgICAgICB7LyogSWYgdGhlIHBvc3QgaGFzIGNhdGVnb3JpZXMsIHJlbmRlciB0aGUgY2F0ZWdvcmllcyAqL31cbiAgICAgICAgICAgICAgICAgICAge3Bvc3QuY2F0ZWdvcmllcyAmJiA8UG9zdENhdGVnb3JpZXMgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc30vPn1cblxuICAgICAgICAgICAgICAgICAgICB7LyogVGhlIHBvc3QncyBtZXRhZGF0YSBsaWtlIGF1dGhvciwgcHVibGlzaCBkYXRlLCBhbmQgY29tbWVudHMgKi99XG4gICAgICAgICAgICAgICAgICAgIDxQb3N0TWV0YSBpdGVtPXtwb3N0fS8+XG5cbiAgICAgICAgICAgICAgICAgICAge3N0YXRlLnRoZW1lLmZlYXR1cmVkTWVkaWEuc2hvd09uUG9zdCAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8RmVhdHVyZWRJbWFnZSBpZD17cG9zdC5mZWF0dXJlZF9tZWRpYX0gaXNTaW5nbGVQb3N0PXt0cnVlfS8+XG4gICAgICAgICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAgICAgICAgPFNvY2lhbE1lZGlhU2hhcmVCdXR0b25zXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw9e3Bvc3RVcmx9XG4gICAgICAgICAgICAgICAgICAgICAgICBtZWRpYT17bWVkaWEuc291cmNlX3VybH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD17bWVkaWEuYWx0X3RleHR9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17cG9zdC50aXRsZS5yZW5kZXJlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuPXtwb3N0LnRpdGxlLnJlbmRlcmVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzaHRhZz0nI3J1dGhnZW9yZ2lldidcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc2h0YWdzPXtbJ3J1dGhnZW9yZ2lldicsICdyZWNpcGVzJ119XG4gICAgICAgICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIElmIHRoZSBwb3N0IGhhcyB0YWdzLCByZW5kZXIgaXQgKi99XG4gICAgICAgICAgICAgICAgICAgIHtwb3N0LnRhZ3MgJiYgPFBvc3RUYWdzIHRhZ3M9e3RhZ3N9Lz59XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIGlmIHRoZSBwb3N0IGhhcyBzZXJ2aW5ncywgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLnNlcnZpbmdzJ10gJiYgPFJlY2lwZVNlcnZpbmdzIGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIHsvKiBpZiB0aGUgcG9zdCBoYXMgcHJlcGFyYXRpb24gdGltZSwgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLnByZXBhcmF0aW9uX3RpbWUnXSAmJiA8UmVjaXBlUHJlcGFyYXRpb25UaW1lIGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIHsvKiBpZiB0aGUgcG9zdCBoYXMgY29va2luZyB0aW1lLCByZW5kZXIgaXQgKi99XG4gICAgICAgICAgICAgICAgICAgIHtwb3N0LmFjZlsncG9zdGZpZWxkZ3JvdXAuY29va2luZ190aW1lJ10gJiYgPFJlY2lwZUNvb2tpbmdUaW1lIGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIDxQb3N0VGF4b25vbWllcz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDdWlzaW5lVGF4b25vbXk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qIElmIHRoZSBwb3N0IGhhcyBjdWlzaW5lLCByZW5kZXIgaXQgKi99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3Bvc3QuY3Vpc2luZSAmJiA8Q3Vpc2luZSBjdWlzaW5lPXtjdWlzaW5lfS8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9DdWlzaW5lVGF4b25vbXk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8RGlldHNUYXhvbm9teT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7LyogSWYgdGhlIHBvc3QgaGFzIGRpZXRzLCByZW5kZXIgaXQgKi99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3Bvc3QuZGlldHMgJiYgPERpZXRzIGRpZXRzPXtkaWV0c30vPn1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvRGlldHNUYXhvbm9teT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxEaXNoZXNUYXhvbm9teT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7LyogSWYgdGhlIHBvc3QgaGFzIGRpc2hlcywgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtwb3N0LmRpc2hlcyAmJiA8RGlzaGVzIGRpc2hlcz17ZGlzaGVzfS8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9EaXNoZXNUYXhvbm9teT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxNZWFsc1RheG9ub215PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsvKiBJZiB0aGUgcG9zdCBoYXMgZGlzaGVzLCByZW5kZXIgaXQgKi99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3Bvc3QubWVhbHMgJiYgPE1lYWxzIG1lYWxzPXttZWFsc30vPn1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTWVhbHNUYXhvbm9teT5cbiAgICAgICAgICAgICAgICAgICAgPC9Qb3N0VGF4b25vbWllcz5cblxuICAgICAgICAgICAgICAgICAgICB7Lyo8QWRCYW5uZXJCb2R5IG5hbWU9XCJiZWZvcmUtZGVzY3JpcHRpb24tYWRcIi8+Ki99XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIGlmIHRoZSBwb3N0IGhhcyBkZXNjcmlwdGlvbiwgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLmRlc2NyaXB0aW9uJ10gJiZcbiAgICAgICAgICAgICAgICAgICAgPFJlY2lwZURlc2NyaXB0aW9uVGl0bGU+SG93IHRvIGRvIGl0PyA8RGVzY3JpcHRpb25JY29uXG4gICAgICAgICAgICAgICAgICAgICAgICBzcmM9e1Byb2Zlc3Npb25hbENoZWZGZW1hbGV9IGFsdD1cIlByb2Zlc3Npb25hbCBDaGVmIEZlbWFsZVwiLz48L1JlY2lwZURlc2NyaXB0aW9uVGl0bGU+fVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLmRlc2NyaXB0aW9uJ10gJiYgPFJlY2lwZURlc2NyaXB0aW9uIGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIHsvKjxBZEJhbm5lckJvZHlNb2JpbGUgbmFtZT1cImJlZm9yZS1kZXNjcmlwdGlvbi1hZC1tb2JpbGVcIi8+Ki99XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIGlmIHRoZSBwb3N0IGhhcyBiYWRnZSAvIHNwb25zb3JlZCBsaW5rLCByZW5kZXIgaXQgKi99XG4gICAgICAgICAgICAgICAgICAgIHtwb3N0LmFjZlsncG9zdGZpZWxkZ3JvdXAuYmFkZ2UnXSAmJiA8U2VjdGlvblRpdGxlPlByb2R1Y3RzIGkgdXNlIG9yIGhhdmUgdHJpZWQ8L1NlY3Rpb25UaXRsZT59XG4gICAgICAgICAgICAgICAgICAgIHtwb3N0LmFjZlsncG9zdGZpZWxkZ3JvdXAuYmFkZ2UnXSAmJiA8QmFkZ2UgaWQ9e3Bvc3QuaWR9Lz59XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIElmIHRoZSBwb3N0IGhhcyBpbmdyZWRpZW50cywgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLmluZ3JlZGllbnRzJ10gJiZcbiAgICAgICAgICAgICAgICAgICAgPEluZ3JlZGllbnRzVGl0bGU+SW5ncmVkaWVudHMgPEluZ3JlZGllbnRzSWNvbiBzcmM9e0Vhc3lSZWNpcGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PVwiUmVjaXBlIEluZ3JlZGllbnRzXCIvPjwvSW5ncmVkaWVudHNUaXRsZT59XG4gICAgICAgICAgICAgICAgICAgIHtwb3N0LmFjZlsncG9zdGZpZWxkZ3JvdXAuaW5ncmVkaWVudHMnXSAmJiA8SW5ncmVkaWVudHMgaWQ9e3Bvc3QuaWR9Lz59XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIElmIHRoZSBwb3N0IGhhcyBlcXVpcG1lbnQsIHJlbmRlciBpdCAqL31cbiAgICAgICAgICAgICAgICAgICAge3Bvc3QuYWNmWydwb3N0ZmllbGRncm91cC5lcXVpcG1lbnQnXSAmJlxuICAgICAgICAgICAgICAgICAgICA8RXF1aXBtZW50VGl0bGU+RXF1aXBtZW50IDxFcXVpcG1lbnRJY29uIHNyYz17TW9kZXJuQ29va2luZ1Rvb2xzfSBhbHQ9XCJSZWNpcGUgRXF1aXBtZW50XCIvPlxuICAgICAgICAgICAgICAgICAgICA8L0VxdWlwbWVudFRpdGxlPn1cbiAgICAgICAgICAgICAgICAgICAge3Bvc3QuYWNmWydwb3N0ZmllbGRncm91cC5lcXVpcG1lbnQnXSAmJiA8RXF1aXBtZW50IGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIHsvKiBpZiB0aGUgcG9zdCBoYXMgYWZmaWxpYXRlIC8gc3BvbnNvcmVkIGxpbmssIHJlbmRlciBpdCAqL31cbiAgICAgICAgICAgICAgICAgICAge3Bvc3QuYWNmWydwb3N0ZmllbGRncm91cC5zcG9uc29yZWQnXSAmJiA8U3BvbnNvcmVkIGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIHsvKiBpZiB0aGUgcG9zdCBoYXMgdGlwcywgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLnRpcHMnXSAmJlxuICAgICAgICAgICAgICAgICAgICA8UmVjaXBlVGlwc1RpdGxlPlRpcHMgPFJlY2lwZVRpcHNJY29uIHNyYz17UmVjaXBlVGlwc0ljb25Qbmd9IGFsdD1cIlJlY2lwZSB0aXBzXCIvPlxuICAgICAgICAgICAgICAgICAgICA8L1JlY2lwZVRpcHNUaXRsZT59XG4gICAgICAgICAgICAgICAgICAgIHtwb3N0LmFjZlsncG9zdGZpZWxkZ3JvdXAudGlwcyddICYmIDxSZWNpcGVUaXBzIGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIHsvKiBpZiB0aGUgcG9zdCBoYXMgZGVzY3JpcHRpb24sIHJlbmRlciBpdCAqL31cbiAgICAgICAgICAgICAgICAgICAge3Bvc3QuYWNmWydwb3N0ZmllbGRncm91cC5ub3RlJ10gJiYgPFJlY2lwZU5vdGUgaWQ9e3Bvc3QuaWR9Lz59XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIGlmIHRoZSBwb3N0IGhhcyBhIFlvdVR1YmUgdmlkZW8sIHJlbmRlciBpdCAqL31cbiAgICAgICAgICAgICAgICAgICAge3Bvc3QuYWNmWydwb3N0ZmllbGRncm91cC52aWRlbyddICYmXG4gICAgICAgICAgICAgICAgICAgIDxSZWNpcGVZb3V0dWJlVmlkZW9UaXRsZT5XYXRjaCBob3cgaSBtYWtlIGl0IDxZb3VUdWJlSWNvbi8+XG4gICAgICAgICAgICAgICAgICAgIDwvUmVjaXBlWW91dHViZVZpZGVvVGl0bGU+fVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLnZpZGVvJ10gJiYgPFlvdXR1YmVWaWRlbyB2aWRlb0lkPXtwb3N0LmFjZlsncG9zdGZpZWxkZ3JvdXAudmlkZW8nXX0vPn1cblxuICAgICAgICAgICAgICAgICAgICB7LyogSWYgdGhlIHBvc3QgaGFzIGFuIGV4Y2VycHQgKHNob3J0IHN1bW1hcnkgdGV4dCksIHdlIHJlbmRlciBpdCAqL31cbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdC5jb250ZW50ICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UG9zdElubmVyIHNpemU9XCJtZWRpdW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEVudHJ5Q29udGVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxIdG1sMlJlYWN0IGh0bWw9e3Bvc3QuY29udGVudC5yZW5kZXJlZH0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0VudHJ5Q29udGVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1Bvc3RJbm5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIDxTb2NpYWxNZWRpYVNoYXJlQnV0dG9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsPXtwb3N0VXJsfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWE9e21lZGlhLnNvdXJjZV91cmx9XG4gICAgICAgICAgICAgICAgICAgICAgICBhbHQ9e21lZGlhLmFsdF90ZXh0fVxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e3Bvc3QudGl0bGUucmVuZGVyZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbj17cG9zdC50aXRsZS5yZW5kZXJlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc2h0YWc9JyNydXRoZ2VvcmdpZXYnXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNodGFncz17WydydXRoZ2VvcmdpZXYnLCAncmVjaXBlcyddfVxuICAgICAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgICAgICAgIHs8Q29tbWVudHMgcG9zdElkPXtwb3N0LmlkfSBpZD1cImNvbW1lbnRzXCIvPn1cbiAgICAgICAgICAgICAgICA8L1NlY3Rpb25Db250YWluZXI+XG4gICAgICAgICAgICA8L0hlYWRlcj5cblxuICAgICAgICAgICAgey8qIGlmIHRoZSBwb3N0IGhhcyBzcG9uc29yZWQgYmFkZ2UgLyBzcG9uc29yZWQgbGluaywgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAge3Bvc3QuYWNmWydwb3N0ZmllbGRncm91cC5zcG9uc29yZWRfYmFkZ2UnXSAmJiA8U3BvbnNvcmVkQmFkZ2UgaWQ9e3Bvc3QuaWR9Lz59XG5cbiAgICAgICAgICAgIHsvKlxuICAgICAgICogSWYgdGhlIHdhbnQgdG8gc2hvdyBmZWF0dXJlZCBtZWRpYSBpbiB0aGVcbiAgICAgICAqIGxpc3Qgb2YgZmVhdHVyZWQgcG9zdHMsIHdlIHJlbmRlciB0aGUgbWVkaWEuXG4gICAgICAgKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgPC9Qb3N0QXJ0aWNsZT5cbiAgICApIDogbnVsbDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoUG9zdCk7XG5cbmNvbnN0IEhlYWRlciA9IHN0eWxlZChQb3N0SGVhZGVyKWBcbmJhY2tncm91bmQtY29sb3I6ICNmZmY7XG5tYXJnaW46IDA7XG5wYWRkaW5nOiA0cmVtIDA7XG5AbWVkaWEgKG1pbi13aWR0aDogNzAwcHgpIHtcbnBhZGRpbmc6IDhyZW0gMDtcbn1cbmA7XG5cbmNvbnN0IFBvc3RBcnRpY2xlID0gc3R5bGVkKF9Qb3N0KWBcbnBhZGRpbmctdG9wOiAwICFpbXBvcnRhbnQ7XG5gO1xuXG5jb25zdCBGZWF0dXJlZEltYWdlID0gc3R5bGVkKEZlYXR1cmVkTWVkaWEpYCAke3R3YG1heC1oLWF1dG9gfSBgO1xuXG5jb25zdCBQb3N0VGl0bGUgPSBzdHlsZWQoJ2gxJylgICR7dHdgdGV4dC02eGwgc206dGV4dC04eGwgYH1gO1xuXG5jb25zdCBTZWN0aW9uVGl0bGUgPSBzdHlsZWQoJ2gyJylgICR7dHdgdGV4dC1ncmF5LTgwMCBmb250LW5vcm1hbCBweS02IHB4LTIgdXBwZXJjYXNlYH1gO1xuY29uc3QgSW5ncmVkaWVudHNUaXRsZSA9IHN0eWxlZCgnaDInKWAgJHt0d2B0ZXh0LWdyYXktODAwIGZvbnQtbm9ybWFsIHB5LTYgcHgtMiB1cHBlcmNhc2VgfWA7XG5jb25zdCBFcXVpcG1lbnRUaXRsZSA9IHN0eWxlZCgnaDInKWAgJHt0d2B0ZXh0LWdyYXktODAwIGZvbnQtbm9ybWFsIHB5LTYgcHgtMiB1cHBlcmNhc2VgfWA7XG5jb25zdCBSZWNpcGVEZXNjcmlwdGlvblRpdGxlID0gc3R5bGVkKCdoMicpYCAke3R3YHRleHQtZ3JheS04MDAgZm9udC1ub3JtYWwgcHktNiBweC0yIHVwcGVyY2FzZWB9YDtcbmNvbnN0IFJlY2lwZVRpcHNUaXRsZSA9IHN0eWxlZCgnaDInKWAgJHt0d2B0ZXh0LWdyYXktODAwIHB5LTYgcHgtMiBmb250LW5vcm1hbCB1cHBlcmNhc2VgfWA7XG5jb25zdCBSZWNpcGVZb3V0dWJlVmlkZW9UaXRsZSA9IHN0eWxlZCgnaDInKWAgJHt0d2B0ZXh0LWdyYXktODAwIGZvbnQtbm9ybWFsIHB5LTYgcHgtMiB1cHBlcmNhc2VgfWA7XG5jb25zdCBSZWNvbW1lbmRlZFBvc3RzVGl0bGUgPSBzdHlsZWQoJ2gyJylgICR7dHdgdGV4dC1ncmF5LTgwMCBmb250LW5vcm1hbCB0ZXh0LWNlbnRlciBweS02IHB4LTIgdXBwZXJjYXNlYH1gO1xuY29uc3QgQWRCYW5uZXJCb2R5ID0gc3R5bGVkKFNsb3QpYCAke3R3YGZsZXgganVzdGlmeS1jZW50ZXIgbS0xMCBtZDpoaWRkZW5gfWA7XG5jb25zdCBBZEJhbm5lckJvZHlNb2JpbGUgPSBzdHlsZWQoU2xvdClgICR7dHdgZmxleCBqdXN0aWZ5LWNlbnRlciBtLTEwIG1kOmhpZGRlbmB9YDtcblxuY29uc3QgUG9zdFRheG9ub21pZXMgPSBzdHlsZWQoJ2RpdicpYCAke3R3YGZsZXggY29udGVudC1zdGFydCB0ZXh0LWxlZnQgc206ZmxleC13cmFwIGZsZXgtd3JhcCBoLTMwIGJnLWdyYXktMjAwIG15LTEwIHAtMTBgfWA7XG5jb25zdCBDdWlzaW5lVGF4b25vbXkgPSBzdHlsZWQoJ2RpdicpYCAke3R3YHctZnVsbCBwLTFgfWA7XG5jb25zdCBEaWV0c1RheG9ub215ID0gc3R5bGVkKCdkaXYnKWAgJHt0d2B3LWZ1bGwgcC0xYH1gO1xuY29uc3QgRGlzaGVzVGF4b25vbXkgPSBzdHlsZWQoJ2RpdicpYCAke3R3YHctZnVsbCBwLTFgfWA7XG5jb25zdCBNZWFsc1RheG9ub215ID0gc3R5bGVkKCdkaXYnKWAgJHt0d2B3LWZ1bGwgcC0xYH1gO1xuY29uc3QgSW5ncmVkaWVudHNJY29uID0gc3R5bGVkKCdpbWcnKWAgJHt0d2BpbmxpbmUtYmxvY2sgdy0yNCBhbGlnbi1ib3R0b21gfWA7XG5jb25zdCBFcXVpcG1lbnRJY29uID0gc3R5bGVkKCdpbWcnKWAgJHt0d2BpbmxpbmUtYmxvY2sgdy0yNCBhbGlnbi1ib3R0b21gfWA7XG5jb25zdCBEZXNjcmlwdGlvbkljb24gPSBzdHlsZWQoJ2ltZycpYCAke3R3YGlubGluZS1ibG9jayB3LTI0IGFsaWduLWJvdHRvbWB9YDtcbmNvbnN0IFJlY2lwZVRpcHNJY29uID0gc3R5bGVkKCdpbWcnKWAgJHt0d2BpbmxpbmUtYmxvY2sgdy0yNCBhbGlnbi1ib3R0b21gfWA7XG5jb25zdCBIaWdMaWdodGVkVGV4dCA9IHN0eWxlZCgnc3BhbicpYCAke3R3YGJnLWdyYXktMjAwIGZvbnQtbm9ybWFsIHB4LTUgcm91bmRlZC1mdWxsYH1gO1xuY29uc3QgUmVhZGluZ1Byb2dyZXNzQmFyID0gc3R5bGVkKFJlYWRpbmdQcm9ncmVzcylgXG5oZWlnaHQ6IDAuMnJlbTtcbnRyYW5zaXRpb246IHdpZHRoIDAuMnMgbGluZWFyO1xuYDtcblxuIl19 */\");var MealsTaxonomy=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('div',{target:\"e62fgu217\",label:\"MealsTaxonomy\"})({\"width\":_tailwindConfig.theme.width[\"full\"],\"padding\":_tailwindConfig.theme.padding[\"1\"]}, false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var IngredientsIcon=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('img',{target:\"e62fgu218\",label:\"IngredientsIcon\"})({\"display\":\"inline-block\",\"width\":_tailwindConfig.theme.width[\"24\"],\"verticalAlign\":\"bottom\"}, false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var EquipmentIcon=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('img',{target:\"e62fgu219\",label:\"EquipmentIcon\"})({\"display\":\"inline-block\",\"width\":_tailwindConfig.theme.width[\"24\"],\"verticalAlign\":\"bottom\"}, false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var DescriptionIcon=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('img',{target:\"e62fgu220\",label:\"DescriptionIcon\"})({\"display\":\"inline-block\",\"width\":_tailwindConfig.theme.width[\"24\"],\"verticalAlign\":\"bottom\"}, false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var RecipeTipsIcon=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('img',{target:\"e62fgu221\",label:\"RecipeTipsIcon\"})({\"display\":\"inline-block\",\"width\":_tailwindConfig.theme.width[\"24\"],\"verticalAlign\":\"bottom\"}, false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var HigLightedText=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('span',{target:\"e62fgu222\",label:\"HigLightedText\"})(Object.assign(tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.resolveStyle(_tailwindConfig,[{\"prop\":\"backgroundColor\",\"config\":\"backgroundColor\"},{\"prop\":\"backgroundSize\",\"config\":\"backgroundSize\"},{\"prop\":\"backgroundPosition\",\"config\":\"backgroundPosition\"}],\"gray-200\"),tailwind_macro_utils_umd_js__WEBPACK_IMPORTED_MODULE_1___default.a.resolveStyle(_tailwindConfig,[{\"prop\":\"fontWeight\",\"config\":\"fontWeight\"},{\"prop\":\"fontFamily\",\"config\":\"fontFamily\"}],\"normal\"),{\"paddingLeft\":_tailwindConfig.theme.padding[\"5\"],\"paddingRight\":_tailwindConfig.theme.padding[\"5\"],\"borderRadius\":_tailwindConfig.theme.borderRadius[\"full\"]}), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kZWphbmdlb3JnaWV2L0NvZGUvcnV0aGdlb3JnaWV2LWZyb250aXR5L3BhY2thZ2VzL3R3ZW50eXR3ZW50eS10aGVtZS9zcmMvY29tcG9uZW50cy9wb3N0L3Bvc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK1NxQyIsImZpbGUiOiIvVXNlcnMvZGVqYW5nZW9yZ2lldi9Db2RlL3J1dGhnZW9yZ2lldi1mcm9udGl0eS9wYWNrYWdlcy90d2VudHl0d2VudHktdGhlbWUvc3JjL2NvbXBvbmVudHMvcG9zdC9wb3N0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzdHlsZWQsIGNvbm5lY3QsIFNsb3R9IGZyb20gXCJmcm9udGl0eVwiO1xuaW1wb3J0IFJlYWN0LCB7dXNlRWZmZWN0fSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBGZWF0dXJlZE1lZGlhIGZyb20gXCIuL2ZlYXR1cmVkLW1lZGlhXCI7XG5pbXBvcnQge1xuICAgIEVudHJ5Q29udGVudCxcbiAgICBQb3N0IGFzIF9Qb3N0LFxuICAgIFBvc3RIZWFkZXIsXG4gICAgUG9zdElubmVyLFxuICAgIFNlY3Rpb25Db250YWluZXIsXG59IGZyb20gXCIuL3Bvc3QtaXRlbVwiO1xuaW1wb3J0IFBvc3RDYXRlZ29yaWVzIGZyb20gXCIuL3Bvc3QtY2F0ZWdvcmllc1wiO1xuaW1wb3J0IFBvc3RNZXRhIGZyb20gXCIuL3Bvc3QtbWV0YVwiO1xuaW1wb3J0IFBvc3RUYWdzIGZyb20gXCIuL3Bvc3QtdGFnc1wiO1xuaW1wb3J0IEluZ3JlZGllbnRzIGZyb20gXCIuL2FjZi9pbmdyZWRpZW50cy9JbmdyZWRpZW50c1wiO1xuaW1wb3J0IFNwb25zb3JlZCBmcm9tIFwiLi9hY2Yvc3BvbnNvcmVkL1Nwb25zb3JlZFwiO1xuaW1wb3J0IEJhZGdlIGZyb20gXCIuL2FjZi9iYWRnZXMvQmFkZ2VcIjtcbmltcG9ydCBFcXVpcG1lbnQgZnJvbSBcIi4vYWNmL2VxdWlwbWVudC9FcXVpcG1lbnRcIjtcbmltcG9ydCBSZWNpcGVEZXNjcmlwdGlvbiBmcm9tIFwiLi9hY2YvUmVjaXBlRGVzY3JpcHRpb25cIjtcbmltcG9ydCBSZWNpcGVOb3RlIGZyb20gXCIuL2FjZi9SZWNpcGVOb3RlXCI7XG5pbXBvcnQgUmVjaXBlVGlwcyBmcm9tIFwiLi9hY2YvdGlwcy9SZWNpcGVUaXBzXCI7XG5pbXBvcnQgQ3Vpc2luZSBmcm9tIFwiLi9hY2YvY3Vpc2luZS9DdWlzaW5lXCI7XG5pbXBvcnQgRGlldHMgZnJvbSBcIi4vYWNmL2RpZXRzL0RpZXRzXCI7XG5pbXBvcnQgRGlzaGVzIGZyb20gXCIuL2FjZi9kaXNoZXMvRGlzaGVzXCI7XG5pbXBvcnQgTWVhbHMgZnJvbSBcIi4vYWNmL21lYWxzL01lYWxzXCI7XG5pbXBvcnQgWW91dHViZVZpZGVvIGZyb20gXCIuL2FjZi9Zb3V0dWJlVmlkZW9cIjtcbmltcG9ydCBZb3VUdWJlSWNvbiBmcm9tIFwiLi4vZ2xvYmFsL2ljb25zL1lvdVR1YmVJY29uXCI7XG5pbXBvcnQgRWFzeVJlY2lwZSBmcm9tIFwiLi4vZ2xvYmFsL2ljb25zL3BuZy9FYXN5UmVjaXBlLnBuZ1wiXG5pbXBvcnQgTW9kZXJuQ29va2luZ1Rvb2xzIGZyb20gXCIuLi9nbG9iYWwvaWNvbnMvcG5nL01vZGVybkNvb2tpbmdUb29scy5wbmdcIlxuaW1wb3J0IFByb2Zlc3Npb25hbENoZWZGZW1hbGUgZnJvbSBcIi4uL2dsb2JhbC9pY29ucy9wbmcvUHJvZmVzc2lvbmFsQ2hlZkZlbWFsZS5wbmdcIlxuaW1wb3J0IFJlY2lwZVRpcHNJY29uUG5nIGZyb20gXCIuLi9nbG9iYWwvaWNvbnMvcG5nL1JlY2lwZVRpcHMucG5nXCJcbmltcG9ydCBSZWNpcGVQcmVwYXJhdGlvblRpbWUgZnJvbSBcIi4vYWNmL1JlY2lwZVByZXBhcmF0aW9uVGltZVwiXG5pbXBvcnQgUmVjaXBlQ29va2luZ1RpbWUgZnJvbSBcIi4vYWNmL1JlY2lwZUNvb2tpbmdUaW1lXCI7XG5pbXBvcnQgUmVjaXBlU2VydmluZ3MgZnJvbSBcIi4vYWNmL1JlY2lwZVNlcnZpbmdzXCI7XG5pbXBvcnQgUmVjb21tZW5kZWRQb3N0cyBmcm9tIFwiLi9hY2YvcmVjb21tZW5kZWQvcG9zdHMvUmVjb21tZW5kZWRQb3N0c1wiO1xuaW1wb3J0IFJlYWRpbmdQcm9ncmVzcyBmcm9tIFwicmVhY3QtcmVhZGluZy1wcm9ncmVzc1wiXG5pbXBvcnQgQ29tbWVudHMgZnJvbSAnLi4vZ2xvYmFsL2NvbW1lbnRzL2luZGV4J1xuaW1wb3J0IFNvY2lhbE1lZGlhU2hhcmVCdXR0b25zIGZyb20gXCIuLi9nbG9iYWwvc29jaWFsLXNoYXJlL1NvY2lhbE1lZGlhU2hhcmVCdXR0b25zXCI7XG5pbXBvcnQgR29vZ2xlU3RydWN0dXJlZERhdGFGb3JSZWNpcGUgZnJvbSBcIi4uL2dsb2JhbC9tYXJrZXRpbmcvZ29vZ2xlL0dvb2dsZVN0cnVjdHVyZWREYXRhRm9yUmVjaXBlXCI7XG5pbXBvcnQgdHcgZnJvbSAndGFpbHdpbmQubWFjcm8nXG5pbXBvcnQgU3BvbnNvcmVkQmFkZ2UgZnJvbSBcIi4vYWNmL3Nwb25zb3JlZC9TcG9uc29yZWRCYWRnZVwiO1xuXG5pbXBvcnQgUmVhY3RJbnN0YVN0b3JpZXMgZnJvbSBcIi4uL2dsb2JhbC9tYXJrZXRpbmcvc3Rvcmllcy9SZWFjdEluc3RhU3Rvcmllc1wiXG5cbmNvbnN0IFBvc3QgPSAoe3N0YXRlLCBhY3Rpb25zLCBsaWJyYXJpZXN9KSA9PiB7XG4gICAgLy8gR2V0IGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IFVSTC5cbiAgICBjb25zdCBkYXRhID0gc3RhdGUuc291cmNlLmdldChzdGF0ZS5yb3V0ZXIubGluayk7XG4gICAgLy8gR2V0IHRoZSBkYXRhIG9mIHRoZSBwb3N0LlxuICAgIGNvbnN0IHBvc3QgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcblxuICAgIGNvbnN0IHBvc3RVcmwgPSBzdGF0ZS5mcm9udGl0eS51cmwgKyBzdGF0ZS5yb3V0ZXIubGluaztcblxuICAgIGNvbnN0IG1lZGlhID0gc3RhdGUuc291cmNlLmF0dGFjaG1lbnRbcG9zdC5mZWF0dXJlZF9tZWRpYV07XG5cbiAgICAvLyBHZXQgdGhlIGRhdGEgb2YgdGhlIGF1dGhvci5cbiAgICAvLyBjb25zdCBhdXRob3IgPSBzdGF0ZS5zb3VyY2UuYXV0aG9yW3Bvc3QuYXV0aG9yXTtcbiAgICAvLyBHZXQgYSBodW1hbiByZWFkYWJsZSBkYXRlLlxuICAgIC8vIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShwb3N0LmRhdGUpO1xuICAgIC8vIEdldCB0aGUgaHRtbDJyZWFjdCBjb21wb25lbnQuXG4gICAgY29uc3QgSHRtbDJSZWFjdCA9IGxpYnJhcmllcy5odG1sMnJlYWN0LkNvbXBvbmVudDtcblxuICAgIC8vIEdldCBhbGwgY2F0ZWdvcmllc1xuICAgIGNvbnN0IGFsbENhdGVnb3JpZXMgPSBzdGF0ZS5zb3VyY2UuY2F0ZWdvcnk7XG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW0ncyBjYXRlZ29yaWVzIGlzIGFuIGFycmF5IG9mIGVhY2ggY2F0ZWdvcnkgaWRcbiAgICAgKiBTbywgd2UnbGwgbG9vayB1cCB0aGUgZGV0YWlscyBvZiBlYWNoIGNhdGVnb3J5IGluIGFsbENhdGVnb3JpZXNcbiAgICAgKi9cbiAgICBjb25zdCBjYXRlZ29yaWVzID0gcG9zdC5jYXRlZ29yaWVzICYmIHBvc3QuY2F0ZWdvcmllcy5tYXAoKGNhdElkKSA9PiBhbGxDYXRlZ29yaWVzW2NhdElkXSk7XG5cbiAgICAvLyBHZXQgYWxsIHRhZ3NcbiAgICBjb25zdCBhbGxUYWdzID0gc3RhdGUuc291cmNlLnRhZztcbiAgICAvKipcbiAgICAgKiBUaGUgaXRlbSdzIGNhdGVnb3JpZXMgaXMgYW4gYXJyYXkgb2YgZWFjaCB0YWcgaWRcbiAgICAgKiBTbywgd2UnbGwgbG9vayB1cCB0aGUgZGV0YWlscyBvZiBlYWNoIHRhZyBpbiBhbGxUYWdzXG4gICAgICovXG4gICAgY29uc3QgdGFncyA9IHBvc3QudGFncyAmJiBwb3N0LnRhZ3MubWFwKCh0YWdJZCkgPT4gYWxsVGFnc1t0YWdJZF0pO1xuXG4gICAgLy8gR2V0IGFsbCBjdWlzaW5lXG4gICAgY29uc3QgYWxsQ3Vpc2luZSA9IHN0YXRlLnNvdXJjZS5jdWlzaW5lO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW0ncyBjdWlzaW5lIGlzIGFuIGFycmF5IG9mIGVhY2ggY3Vpc2luZSBpZFxuICAgICAqIFNvLCB3ZSdsbCBsb29rIHVwIHRoZSBkZXRhaWxzIG9mIGVhY2ggY3Vpc2luZSBpbiBhbGxDdWlzaW5lXG4gICAgICovXG4gICAgY29uc3QgY3Vpc2luZSA9IHBvc3QuY3Vpc2luZSAmJiBwb3N0LmN1aXNpbmUubWFwKChjdWlzaW5lSWQpID0+IGFsbEN1aXNpbmVbY3Vpc2luZUlkXSk7XG5cbiAgICAvLyBHZXQgYWxsIGRpZXRzXG4gICAgY29uc3QgYWxsRGlldHMgPSBzdGF0ZS5zb3VyY2UuZGlldHM7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaXRlbSdzIGRpZXRzIGlzIGFuIGFycmF5IG9mIGVhY2ggZGlldCBpZFxuICAgICAqIFNvLCB3ZSdsbCBsb29rIHVwIHRoZSBkZXRhaWxzIG9mIGVhY2ggZGlldCBpbiBhbGxEaWV0c1xuICAgICAqL1xuICAgIGNvbnN0IGRpZXRzID0gcG9zdC5kaWV0cyAmJiBwb3N0LmRpZXRzLm1hcCgoZGlldElkKSA9PiBhbGxEaWV0c1tkaWV0SWRdKTtcblxuICAgIC8vIEdldCBhbGwgZGlzaGVzXG4gICAgY29uc3QgYWxsRGlzaGVzID0gc3RhdGUuc291cmNlLmRpc2hlcztcblxuICAgIC8qKlxuICAgICAqIFRoZSBpdGVtJ3MgZGlzaGVzIGlzIGFuIGFycmF5IG9mIGVhY2ggZGlzaCBpZFxuICAgICAqIFNvLCB3ZSdsbCBsb29rIHVwIHRoZSBkZXRhaWxzIG9mIGVhY2ggZGlzaCBpbiBhbGxEaXNoZXNcbiAgICAgKi9cbiAgICBjb25zdCBkaXNoZXMgPSBwb3N0LmRpc2hlcyAmJiBwb3N0LmRpc2hlcy5tYXAoKGRpc2hJZCkgPT4gYWxsRGlzaGVzW2Rpc2hJZF0pO1xuXG4gICAgLy8gR2V0IGFsbCBtZWFsc1xuICAgIGNvbnN0IGFsbE1lYWxzID0gc3RhdGUuc291cmNlLm1lYWxzO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW0ncyBkaXNoZXMgaXMgYW4gYXJyYXkgb2YgZWFjaCBjYXRlZ29yeSBpZFxuICAgICAqIFNvLCB3ZSdsbCBsb29rIHVwIHRoZSBkZXRhaWxzIG9mIGVhY2ggZGlzaCBpbiBhbGxEaXNoZXNcbiAgICAgKi9cbiAgICBjb25zdCBtZWFscyA9IHBvc3QubWVhbHMgJiYgcG9zdC5tZWFscy5tYXAoKG1lYWxJZCkgPT4gYWxsTWVhbHNbbWVhbElkXSk7XG5cbiAgICAvKipcbiAgICAgKiBPbmNlIHRoZSBwb3N0IGhhcyBsb2FkZWQgaW4gdGhlIERPTSwgcHJlZmV0Y2ggYm90aCB0aGVcbiAgICAgKiBob21lIHBvc3RzIGFuZCB0aGUgbGlzdCBjb21wb25lbnQgc28gaWYgdGhlIHVzZXIgdmlzaXRzXG4gICAgICogdGhlIGhvbWUgcGFnZSwgZXZlcnl0aGluZyBpcyByZWFkeSBhbmQgaXQgbG9hZHMgaW5zdGFudGx5LlxuICAgICAqL1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGFjdGlvbnMuc291cmNlLmZldGNoKFwiL1wiKTtcbiAgICB9LCBbXSk7XG5cbiAgICAvLyBMb2FkIHRoZSBwb3N0LCBidXQgb25seSBpZiB0aGUgZGF0YSBpcyByZWFkeS5cbiAgICByZXR1cm4gZGF0YS5pc1JlYWR5ID8gKFxuICAgICAgICA8UG9zdEFydGljbGUgaWQ9XCJ0YXJnZXQtZWxcIj5cbiAgICAgICAgICAgIDxSZWFkaW5nUHJvZ3Jlc3NCYXIgdGFyZ2V0RWw9XCIjdGFyZ2V0LWVsXCIvPlxuXG4gICAgICAgICAgICB7LyogQWRkIEdvb2dsZSBTdHJ1Y3R1cmVkIGRhdGEgZm9yIHJlY2lwZSAqL31cbiAgICAgICAgICAgIHs8R29vZ2xlU3RydWN0dXJlZERhdGFGb3JSZWNpcGUgaWQ9e3Bvc3QuaWR9Lz59XG5cbiAgICAgICAgICAgIDxIZWFkZXI+XG4gICAgICAgICAgICAgICAgPFNlY3Rpb25Db250YWluZXI+XG4gICAgICAgICAgICAgICAgICAgIDxQb3N0VGl0bGUgY2xhc3NOYW1lPVwiaGVhZGluZy1zaXplLTFcIj57cG9zdC50aXRsZS5yZW5kZXJlZH08L1Bvc3RUaXRsZT5cblxuICAgICAgICAgICAgICAgICAgICB7LyogSWYgdGhlIHBvc3QgaGFzIGNhdGVnb3JpZXMsIHJlbmRlciB0aGUgY2F0ZWdvcmllcyAqL31cbiAgICAgICAgICAgICAgICAgICAge3Bvc3QuY2F0ZWdvcmllcyAmJiA8UG9zdENhdGVnb3JpZXMgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc30vPn1cblxuICAgICAgICAgICAgICAgICAgICB7LyogVGhlIHBvc3QncyBtZXRhZGF0YSBsaWtlIGF1dGhvciwgcHVibGlzaCBkYXRlLCBhbmQgY29tbWVudHMgKi99XG4gICAgICAgICAgICAgICAgICAgIDxQb3N0TWV0YSBpdGVtPXtwb3N0fS8+XG5cbiAgICAgICAgICAgICAgICAgICAge3N0YXRlLnRoZW1lLmZlYXR1cmVkTWVkaWEuc2hvd09uUG9zdCAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8RmVhdHVyZWRJbWFnZSBpZD17cG9zdC5mZWF0dXJlZF9tZWRpYX0gaXNTaW5nbGVQb3N0PXt0cnVlfS8+XG4gICAgICAgICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAgICAgICAgPFNvY2lhbE1lZGlhU2hhcmVCdXR0b25zXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw9e3Bvc3RVcmx9XG4gICAgICAgICAgICAgICAgICAgICAgICBtZWRpYT17bWVkaWEuc291cmNlX3VybH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD17bWVkaWEuYWx0X3RleHR9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17cG9zdC50aXRsZS5yZW5kZXJlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuPXtwb3N0LnRpdGxlLnJlbmRlcmVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzaHRhZz0nI3J1dGhnZW9yZ2lldidcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc2h0YWdzPXtbJ3J1dGhnZW9yZ2lldicsICdyZWNpcGVzJ119XG4gICAgICAgICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIElmIHRoZSBwb3N0IGhhcyB0YWdzLCByZW5kZXIgaXQgKi99XG4gICAgICAgICAgICAgICAgICAgIHtwb3N0LnRhZ3MgJiYgPFBvc3RUYWdzIHRhZ3M9e3RhZ3N9Lz59XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIGlmIHRoZSBwb3N0IGhhcyBzZXJ2aW5ncywgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLnNlcnZpbmdzJ10gJiYgPFJlY2lwZVNlcnZpbmdzIGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIHsvKiBpZiB0aGUgcG9zdCBoYXMgcHJlcGFyYXRpb24gdGltZSwgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLnByZXBhcmF0aW9uX3RpbWUnXSAmJiA8UmVjaXBlUHJlcGFyYXRpb25UaW1lIGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIHsvKiBpZiB0aGUgcG9zdCBoYXMgY29va2luZyB0aW1lLCByZW5kZXIgaXQgKi99XG4gICAgICAgICAgICAgICAgICAgIHtwb3N0LmFjZlsncG9zdGZpZWxkZ3JvdXAuY29va2luZ190aW1lJ10gJiYgPFJlY2lwZUNvb2tpbmdUaW1lIGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIDxQb3N0VGF4b25vbWllcz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDdWlzaW5lVGF4b25vbXk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qIElmIHRoZSBwb3N0IGhhcyBjdWlzaW5lLCByZW5kZXIgaXQgKi99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3Bvc3QuY3Vpc2luZSAmJiA8Q3Vpc2luZSBjdWlzaW5lPXtjdWlzaW5lfS8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9DdWlzaW5lVGF4b25vbXk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8RGlldHNUYXhvbm9teT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7LyogSWYgdGhlIHBvc3QgaGFzIGRpZXRzLCByZW5kZXIgaXQgKi99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3Bvc3QuZGlldHMgJiYgPERpZXRzIGRpZXRzPXtkaWV0c30vPn1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvRGlldHNUYXhvbm9teT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxEaXNoZXNUYXhvbm9teT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7LyogSWYgdGhlIHBvc3QgaGFzIGRpc2hlcywgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtwb3N0LmRpc2hlcyAmJiA8RGlzaGVzIGRpc2hlcz17ZGlzaGVzfS8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9EaXNoZXNUYXhvbm9teT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxNZWFsc1RheG9ub215PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsvKiBJZiB0aGUgcG9zdCBoYXMgZGlzaGVzLCByZW5kZXIgaXQgKi99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3Bvc3QubWVhbHMgJiYgPE1lYWxzIG1lYWxzPXttZWFsc30vPn1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTWVhbHNUYXhvbm9teT5cbiAgICAgICAgICAgICAgICAgICAgPC9Qb3N0VGF4b25vbWllcz5cblxuICAgICAgICAgICAgICAgICAgICB7Lyo8QWRCYW5uZXJCb2R5IG5hbWU9XCJiZWZvcmUtZGVzY3JpcHRpb24tYWRcIi8+Ki99XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIGlmIHRoZSBwb3N0IGhhcyBkZXNjcmlwdGlvbiwgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLmRlc2NyaXB0aW9uJ10gJiZcbiAgICAgICAgICAgICAgICAgICAgPFJlY2lwZURlc2NyaXB0aW9uVGl0bGU+SG93IHRvIGRvIGl0PyA8RGVzY3JpcHRpb25JY29uXG4gICAgICAgICAgICAgICAgICAgICAgICBzcmM9e1Byb2Zlc3Npb25hbENoZWZGZW1hbGV9IGFsdD1cIlByb2Zlc3Npb25hbCBDaGVmIEZlbWFsZVwiLz48L1JlY2lwZURlc2NyaXB0aW9uVGl0bGU+fVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLmRlc2NyaXB0aW9uJ10gJiYgPFJlY2lwZURlc2NyaXB0aW9uIGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIHsvKjxBZEJhbm5lckJvZHlNb2JpbGUgbmFtZT1cImJlZm9yZS1kZXNjcmlwdGlvbi1hZC1tb2JpbGVcIi8+Ki99XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIGlmIHRoZSBwb3N0IGhhcyBiYWRnZSAvIHNwb25zb3JlZCBsaW5rLCByZW5kZXIgaXQgKi99XG4gICAgICAgICAgICAgICAgICAgIHtwb3N0LmFjZlsncG9zdGZpZWxkZ3JvdXAuYmFkZ2UnXSAmJiA8U2VjdGlvblRpdGxlPlByb2R1Y3RzIGkgdXNlIG9yIGhhdmUgdHJpZWQ8L1NlY3Rpb25UaXRsZT59XG4gICAgICAgICAgICAgICAgICAgIHtwb3N0LmFjZlsncG9zdGZpZWxkZ3JvdXAuYmFkZ2UnXSAmJiA8QmFkZ2UgaWQ9e3Bvc3QuaWR9Lz59XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIElmIHRoZSBwb3N0IGhhcyBpbmdyZWRpZW50cywgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLmluZ3JlZGllbnRzJ10gJiZcbiAgICAgICAgICAgICAgICAgICAgPEluZ3JlZGllbnRzVGl0bGU+SW5ncmVkaWVudHMgPEluZ3JlZGllbnRzSWNvbiBzcmM9e0Vhc3lSZWNpcGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PVwiUmVjaXBlIEluZ3JlZGllbnRzXCIvPjwvSW5ncmVkaWVudHNUaXRsZT59XG4gICAgICAgICAgICAgICAgICAgIHtwb3N0LmFjZlsncG9zdGZpZWxkZ3JvdXAuaW5ncmVkaWVudHMnXSAmJiA8SW5ncmVkaWVudHMgaWQ9e3Bvc3QuaWR9Lz59XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIElmIHRoZSBwb3N0IGhhcyBlcXVpcG1lbnQsIHJlbmRlciBpdCAqL31cbiAgICAgICAgICAgICAgICAgICAge3Bvc3QuYWNmWydwb3N0ZmllbGRncm91cC5lcXVpcG1lbnQnXSAmJlxuICAgICAgICAgICAgICAgICAgICA8RXF1aXBtZW50VGl0bGU+RXF1aXBtZW50IDxFcXVpcG1lbnRJY29uIHNyYz17TW9kZXJuQ29va2luZ1Rvb2xzfSBhbHQ9XCJSZWNpcGUgRXF1aXBtZW50XCIvPlxuICAgICAgICAgICAgICAgICAgICA8L0VxdWlwbWVudFRpdGxlPn1cbiAgICAgICAgICAgICAgICAgICAge3Bvc3QuYWNmWydwb3N0ZmllbGRncm91cC5lcXVpcG1lbnQnXSAmJiA8RXF1aXBtZW50IGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIHsvKiBpZiB0aGUgcG9zdCBoYXMgYWZmaWxpYXRlIC8gc3BvbnNvcmVkIGxpbmssIHJlbmRlciBpdCAqL31cbiAgICAgICAgICAgICAgICAgICAge3Bvc3QuYWNmWydwb3N0ZmllbGRncm91cC5zcG9uc29yZWQnXSAmJiA8U3BvbnNvcmVkIGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIHsvKiBpZiB0aGUgcG9zdCBoYXMgdGlwcywgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLnRpcHMnXSAmJlxuICAgICAgICAgICAgICAgICAgICA8UmVjaXBlVGlwc1RpdGxlPlRpcHMgPFJlY2lwZVRpcHNJY29uIHNyYz17UmVjaXBlVGlwc0ljb25Qbmd9IGFsdD1cIlJlY2lwZSB0aXBzXCIvPlxuICAgICAgICAgICAgICAgICAgICA8L1JlY2lwZVRpcHNUaXRsZT59XG4gICAgICAgICAgICAgICAgICAgIHtwb3N0LmFjZlsncG9zdGZpZWxkZ3JvdXAudGlwcyddICYmIDxSZWNpcGVUaXBzIGlkPXtwb3N0LmlkfS8+fVxuXG4gICAgICAgICAgICAgICAgICAgIHsvKiBpZiB0aGUgcG9zdCBoYXMgZGVzY3JpcHRpb24sIHJlbmRlciBpdCAqL31cbiAgICAgICAgICAgICAgICAgICAge3Bvc3QuYWNmWydwb3N0ZmllbGRncm91cC5ub3RlJ10gJiYgPFJlY2lwZU5vdGUgaWQ9e3Bvc3QuaWR9Lz59XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIGlmIHRoZSBwb3N0IGhhcyBhIFlvdVR1YmUgdmlkZW8sIHJlbmRlciBpdCAqL31cbiAgICAgICAgICAgICAgICAgICAge3Bvc3QuYWNmWydwb3N0ZmllbGRncm91cC52aWRlbyddICYmXG4gICAgICAgICAgICAgICAgICAgIDxSZWNpcGVZb3V0dWJlVmlkZW9UaXRsZT5XYXRjaCBob3cgaSBtYWtlIGl0IDxZb3VUdWJlSWNvbi8+XG4gICAgICAgICAgICAgICAgICAgIDwvUmVjaXBlWW91dHViZVZpZGVvVGl0bGU+fVxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hY2ZbJ3Bvc3RmaWVsZGdyb3VwLnZpZGVvJ10gJiYgPFlvdXR1YmVWaWRlbyB2aWRlb0lkPXtwb3N0LmFjZlsncG9zdGZpZWxkZ3JvdXAudmlkZW8nXX0vPn1cblxuICAgICAgICAgICAgICAgICAgICB7LyogSWYgdGhlIHBvc3QgaGFzIGFuIGV4Y2VycHQgKHNob3J0IHN1bW1hcnkgdGV4dCksIHdlIHJlbmRlciBpdCAqL31cbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdC5jb250ZW50ICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UG9zdElubmVyIHNpemU9XCJtZWRpdW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEVudHJ5Q29udGVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxIdG1sMlJlYWN0IGh0bWw9e3Bvc3QuY29udGVudC5yZW5kZXJlZH0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0VudHJ5Q29udGVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1Bvc3RJbm5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIDxTb2NpYWxNZWRpYVNoYXJlQnV0dG9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsPXtwb3N0VXJsfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWE9e21lZGlhLnNvdXJjZV91cmx9XG4gICAgICAgICAgICAgICAgICAgICAgICBhbHQ9e21lZGlhLmFsdF90ZXh0fVxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e3Bvc3QudGl0bGUucmVuZGVyZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbj17cG9zdC50aXRsZS5yZW5kZXJlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc2h0YWc9JyNydXRoZ2VvcmdpZXYnXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNodGFncz17WydydXRoZ2VvcmdpZXYnLCAncmVjaXBlcyddfVxuICAgICAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgICAgICAgIHs8Q29tbWVudHMgcG9zdElkPXtwb3N0LmlkfSBpZD1cImNvbW1lbnRzXCIvPn1cbiAgICAgICAgICAgICAgICA8L1NlY3Rpb25Db250YWluZXI+XG4gICAgICAgICAgICA8L0hlYWRlcj5cblxuICAgICAgICAgICAgey8qIGlmIHRoZSBwb3N0IGhhcyBzcG9uc29yZWQgYmFkZ2UgLyBzcG9uc29yZWQgbGluaywgcmVuZGVyIGl0ICovfVxuICAgICAgICAgICAge3Bvc3QuYWNmWydwb3N0ZmllbGRncm91cC5zcG9uc29yZWRfYmFkZ2UnXSAmJiA8U3BvbnNvcmVkQmFkZ2UgaWQ9e3Bvc3QuaWR9Lz59XG5cbiAgICAgICAgICAgIHsvKlxuICAgICAgICogSWYgdGhlIHdhbnQgdG8gc2hvdyBmZWF0dXJlZCBtZWRpYSBpbiB0aGVcbiAgICAgICAqIGxpc3Qgb2YgZmVhdHVyZWQgcG9zdHMsIHdlIHJlbmRlciB0aGUgbWVkaWEuXG4gICAgICAgKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgPC9Qb3N0QXJ0aWNsZT5cbiAgICApIDogbnVsbDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoUG9zdCk7XG5cbmNvbnN0IEhlYWRlciA9IHN0eWxlZChQb3N0SGVhZGVyKWBcbmJhY2tncm91bmQtY29sb3I6ICNmZmY7XG5tYXJnaW46IDA7XG5wYWRkaW5nOiA0cmVtIDA7XG5AbWVkaWEgKG1pbi13aWR0aDogNzAwcHgpIHtcbnBhZGRpbmc6IDhyZW0gMDtcbn1cbmA7XG5cbmNvbnN0IFBvc3RBcnRpY2xlID0gc3R5bGVkKF9Qb3N0KWBcbnBhZGRpbmctdG9wOiAwICFpbXBvcnRhbnQ7XG5gO1xuXG5jb25zdCBGZWF0dXJlZEltYWdlID0gc3R5bGVkKEZlYXR1cmVkTWVkaWEpYCAke3R3YG1heC1oLWF1dG9gfSBgO1xuXG5jb25zdCBQb3N0VGl0bGUgPSBzdHlsZWQoJ2gxJylgICR7dHdgdGV4dC02eGwgc206dGV4dC04eGwgYH1gO1xuXG5jb25zdCBTZWN0aW9uVGl0bGUgPSBzdHlsZWQoJ2gyJylgICR7dHdgdGV4dC1ncmF5LTgwMCBmb250LW5vcm1hbCBweS02IHB4LTIgdXBwZXJjYXNlYH1gO1xuY29uc3QgSW5ncmVkaWVudHNUaXRsZSA9IHN0eWxlZCgnaDInKWAgJHt0d2B0ZXh0LWdyYXktODAwIGZvbnQtbm9ybWFsIHB5LTYgcHgtMiB1cHBlcmNhc2VgfWA7XG5jb25zdCBFcXVpcG1lbnRUaXRsZSA9IHN0eWxlZCgnaDInKWAgJHt0d2B0ZXh0LWdyYXktODAwIGZvbnQtbm9ybWFsIHB5LTYgcHgtMiB1cHBlcmNhc2VgfWA7XG5jb25zdCBSZWNpcGVEZXNjcmlwdGlvblRpdGxlID0gc3R5bGVkKCdoMicpYCAke3R3YHRleHQtZ3JheS04MDAgZm9udC1ub3JtYWwgcHktNiBweC0yIHVwcGVyY2FzZWB9YDtcbmNvbnN0IFJlY2lwZVRpcHNUaXRsZSA9IHN0eWxlZCgnaDInKWAgJHt0d2B0ZXh0LWdyYXktODAwIHB5LTYgcHgtMiBmb250LW5vcm1hbCB1cHBlcmNhc2VgfWA7XG5jb25zdCBSZWNpcGVZb3V0dWJlVmlkZW9UaXRsZSA9IHN0eWxlZCgnaDInKWAgJHt0d2B0ZXh0LWdyYXktODAwIGZvbnQtbm9ybWFsIHB5LTYgcHgtMiB1cHBlcmNhc2VgfWA7XG5jb25zdCBSZWNvbW1lbmRlZFBvc3RzVGl0bGUgPSBzdHlsZWQoJ2gyJylgICR7dHdgdGV4dC1ncmF5LTgwMCBmb250LW5vcm1hbCB0ZXh0LWNlbnRlciBweS02IHB4LTIgdXBwZXJjYXNlYH1gO1xuY29uc3QgQWRCYW5uZXJCb2R5ID0gc3R5bGVkKFNsb3QpYCAke3R3YGZsZXgganVzdGlmeS1jZW50ZXIgbS0xMCBtZDpoaWRkZW5gfWA7XG5jb25zdCBBZEJhbm5lckJvZHlNb2JpbGUgPSBzdHlsZWQoU2xvdClgICR7dHdgZmxleCBqdXN0aWZ5LWNlbnRlciBtLTEwIG1kOmhpZGRlbmB9YDtcblxuY29uc3QgUG9zdFRheG9ub21pZXMgPSBzdHlsZWQoJ2RpdicpYCAke3R3YGZsZXggY29udGVudC1zdGFydCB0ZXh0LWxlZnQgc206ZmxleC13cmFwIGZsZXgtd3JhcCBoLTMwIGJnLWdyYXktMjAwIG15LTEwIHAtMTBgfWA7XG5jb25zdCBDdWlzaW5lVGF4b25vbXkgPSBzdHlsZWQoJ2RpdicpYCAke3R3YHctZnVsbCBwLTFgfWA7XG5jb25zdCBEaWV0c1RheG9ub215ID0gc3R5bGVkKCdkaXYnKWAgJHt0d2B3LWZ1bGwgcC0xYH1gO1xuY29uc3QgRGlzaGVzVGF4b25vbXkgPSBzdHlsZWQoJ2RpdicpYCAke3R3YHctZnVsbCBwLTFgfWA7XG5jb25zdCBNZWFsc1RheG9ub215ID0gc3R5bGVkKCdkaXYnKWAgJHt0d2B3LWZ1bGwgcC0xYH1gO1xuY29uc3QgSW5ncmVkaWVudHNJY29uID0gc3R5bGVkKCdpbWcnKWAgJHt0d2BpbmxpbmUtYmxvY2sgdy0yNCBhbGlnbi1ib3R0b21gfWA7XG5jb25zdCBFcXVpcG1lbnRJY29uID0gc3R5bGVkKCdpbWcnKWAgJHt0d2BpbmxpbmUtYmxvY2sgdy0yNCBhbGlnbi1ib3R0b21gfWA7XG5jb25zdCBEZXNjcmlwdGlvbkljb24gPSBzdHlsZWQoJ2ltZycpYCAke3R3YGlubGluZS1ibG9jayB3LTI0IGFsaWduLWJvdHRvbWB9YDtcbmNvbnN0IFJlY2lwZVRpcHNJY29uID0gc3R5bGVkKCdpbWcnKWAgJHt0d2BpbmxpbmUtYmxvY2sgdy0yNCBhbGlnbi1ib3R0b21gfWA7XG5jb25zdCBIaWdMaWdodGVkVGV4dCA9IHN0eWxlZCgnc3BhbicpYCAke3R3YGJnLWdyYXktMjAwIGZvbnQtbm9ybWFsIHB4LTUgcm91bmRlZC1mdWxsYH1gO1xuY29uc3QgUmVhZGluZ1Byb2dyZXNzQmFyID0gc3R5bGVkKFJlYWRpbmdQcm9ncmVzcylgXG5oZWlnaHQ6IDAuMnJlbTtcbnRyYW5zaXRpb246IHdpZHRoIDAuMnMgbGluZWFyO1xuYDtcblxuIl19 */\");var ReadingProgressBar=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(react_reading_progress__WEBPACK_IMPORTED_MODULE_31___default.a,{target:\"e62fgu223\",label:\"ReadingProgressBar\"})( false?undefined:{name:\"bx5f8\",styles:\"height:0.2rem;transition:width 0.2s linear;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/twentytwenty-theme/src/components/post/post.js\n");

/***/ })

})